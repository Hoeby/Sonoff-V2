[
    {
        "id": "3c1abf359e6df878",
        "type": "tab",
        "label": "V2 Sonoff Zigbee2Domoticz",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a30abff9e7ac609d",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Probe to get IPs and Infos",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "f62a34e914812bfa",
            "474b28a05a0f5191",
            "1ee36b4fc499eabe"
        ],
        "x": 34,
        "y": 4299,
        "w": 502,
        "h": 82
    },
    {
        "id": "ccf89df08fcb807a",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Stuur naar zigbee bridge",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "ccd7bcb7f8c89243",
            "08606a538ebd86e8",
            "2a5fa43295007d84",
            "e0c4e7e805ce942c",
            "43a0d048ad0eaf62",
            "12ababc6baf3c5d3",
            "9d23bc19593e54ce",
            "312c0d8f079837a5",
            "e710f439523d7004",
            "167d2e355e27fc19",
            "da9698b99df92917",
            "ebcfd11d58a87e26",
            "fa4a667bac67f2c8",
            "b1838a61f42b98ce",
            "9253d79996759524",
            "57661677b89a1e7b",
            "5e69acbb1fc54a1f",
            "238a7647a4485f63",
            "30fe9f8ea7de2fb7",
            "56af6ad4a7dbb1cb",
            "6e6a7cbdfe39d0b4",
            "c39ad7d28bcdc7d9",
            "9c7d7e642c182712",
            "4949e67efbb98f5e",
            "1ae8a6e9245eaf9b",
            "bcfca4459487c695"
        ],
        "x": 34,
        "y": 3219,
        "w": 1353,
        "h": 262
    },
    {
        "id": "9d0f572b4aa1aba2",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "IDX zigbee tabel",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "f6bb43b8dea1c052",
            "d1bcc76c7b3434a0",
            "e76b4239d71167aa",
            "8e1defee4ffe54e7",
            "434d961017963f40",
            "062f1f55585b2819",
            "2944f3356aaf0eb2",
            "6d333231e93d9f20",
            "25a9669194c05d7c",
            "084a7f42825dc139",
            "988d277cc68cd08c",
            "d7f390a0f8117a1e",
            "7aa47fa379fb1e6f",
            "ee7c7b73069d4855",
            "8d13d2bc424f2865",
            "30aab3ba9b8254aa",
            "bf4c6cf80083e5d8",
            "07b3e67bf5a5f334",
            "f26f0f234dc09e2d",
            "17806bfa406eea4d",
            "8b874245fd982544",
            "d743504d0f6f9807",
            "d8fc7deb0b2e7cff",
            "cb8ec32d6eb317f9",
            "047ec4ae74055c95",
            "8db776c57086a242",
            "943615acd1aeadfb"
        ],
        "x": 34,
        "y": 1999,
        "w": 1592,
        "h": 482
    },
    {
        "id": "56e6b148885b3805",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Herbenoem Zigbee apparaten",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "fd5a1b860aac7c4e",
            "181857d6dea426c9",
            "c06d3a9d200fe542",
            "65bf68ffd9acaa1f",
            "967ae676480e32a7",
            "2c116f8cfdc079dc",
            "a6ae547e6e0edc2c",
            "197c850df2b84406",
            "283e83bbdfa0fece",
            "5453042ca5706d12",
            "99de50d55ba8b434",
            "a0a7ddab3ea31950",
            "c40798c7801b4717",
            "aa9fa71984e8f14c",
            "b6c4870f67bd1ee8",
            "63ef986b5d216961",
            "41142c143e2198fa",
            "325e02357c787a0b",
            "7f05c13d02221381",
            "6f2e76b61cacc33d"
        ],
        "x": 34,
        "y": 2699,
        "w": 1432,
        "h": 282
    },
    {
        "id": "7ba0c0cba0f8d3cb",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Heiman devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "c76c62c4b7eab95f",
            "3123ca787474829f",
            "a9a40afb90f39708",
            "bf0d38c8dfb35a00",
            "fe7da7f05341ea7d",
            "1e7956c3f9abbb41",
            "a8b0c83b08b5b798"
        ],
        "x": 2414,
        "y": 539,
        "w": 932,
        "h": 122
    },
    {
        "id": "47ed67ab93c44d5c",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Lidl devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "8fe122afb9794fac",
            "3e65177545f26e89",
            "54aecbceaa8fc8a8",
            "a6fca003696ee313",
            "747b48f4aef4973c",
            "918a0ae8b7ce5294",
            "67ce6624df93cc6b",
            "2d918b02e531dbea",
            "adc88992cb43371c",
            "047e48fd30775b86",
            "7272d964025bfec8",
            "095c1403794ff39b",
            "5090c3e7b94da71e",
            "9984884da0ac4ef7",
            "b6977d35b71e17ba",
            "22e0a3f2fcfd8827"
        ],
        "x": 2414,
        "y": 899,
        "w": 932,
        "h": 242
    },
    {
        "id": "f8c9fe6685106ccb",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Osram devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "34cb19758421819a",
            "f823747d66d9026e",
            "e1ff2de83f9489a5",
            "855afc849e4e07ba",
            "cd524ca6d9fb70e5"
        ],
        "x": 2414,
        "y": 1151.5,
        "w": 892,
        "h": 97
    },
    {
        "id": "05ceb2a997096c5a",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Sonoff devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "e5338bba2c619bba",
            "bca36870516de147",
            "41c0765bbbd40112",
            "9543bac4a8ed8022",
            "60978b651b1c2bf0",
            "9c3f41d445d0dc2f",
            "17345b5def7dd23b",
            "6f900f263f675bab",
            "85245932760288b4",
            "83db7f2646a304d6",
            "16a24ac5537ce50d",
            "17e5a8ab902f410e",
            "693c955e6cf5cdbb",
            "47872c93833c55aa"
        ],
        "x": 2414,
        "y": 1259,
        "w": 952,
        "h": 202
    },
    {
        "id": "169675e56bdde684",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Set custom page domoticz",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "f389a3e148f1774f",
            "ad167f6132876101",
            "e963524b44203e38",
            "9116e7ae68a769a5",
            "3367132be1b787ed",
            "000b7d32fbef1c19",
            "cb34f216441db05c",
            "048d3da4cfa3db4e",
            "3019006a9c24f3f2",
            "51559f405d494a4a",
            "586c7b3c4ceaf806",
            "8ad997bf75ad7416",
            "30abe158b9105fee",
            "a4cfff7b4cdee380",
            "b1d0596050a00834",
            "166782c42321912b",
            "500af87dd2bbfa54",
            "dd918635ed9f4fa3",
            "79c362d4385c63cc",
            "f75a40360f63cf8f",
            "4fd1fcde19dcda86"
        ],
        "x": 34,
        "y": 1659,
        "w": 1672,
        "h": 322
    },
    {
        "id": "4813a2060540ee71",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Xiaomi devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "2bb442990afd7f4b",
            "96aea1c7b46fbad0",
            "985b0ca87d617e04",
            "5b5017c20dbced26",
            "ed6ff6452049bf86",
            "a6bd480b80119757",
            "368f8584a40aa44b",
            "961ee8cedf25de1b",
            "6cc8ca977d371564",
            "bf39bd4af198b709",
            "3445d52d11b356b5",
            "f17ee1b1deaf2f61",
            "694f436c49668d06",
            "9d2bdad4a4da7a13",
            "c41af3f3e0c7fb79",
            "b5aa822b5d816cac",
            "f599e225b044dafd",
            "f1facb7cd579e6b4",
            "b6d4388cc75af6b0",
            "19f7985325e266c1",
            "a82f9fadb61abcb2",
            "f75b5a74fb3c5605",
            "c6466c3e86fd187c",
            "da7de401c93fb6d9",
            "289cb822f5a1ad74",
            "303abee8859d7178"
        ],
        "x": 2414,
        "y": 1479,
        "w": 992,
        "h": 362
    },
    {
        "id": "f3740e1909d3ff06",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Tuya devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "017597617d7bc00b",
            "717d587a990e3462",
            "0b16f7168ac62a5a",
            "8594d9e519e7907b",
            "37f607c2fe57abf8",
            "0d9c31748025070d",
            "2b57dfa562575fb1",
            "8e309c4915312ec0"
        ],
        "x": 2414,
        "y": 1859,
        "w": 952,
        "h": 122
    },
    {
        "id": "b8fda5c8e21359fa",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Tasmota data ontvangen",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "43db1c431a848b25",
            "cc4fd07b8e8a372e",
            "d5abfd0be53b33cc",
            "230600b41223b130",
            "b3c2857a43c0891b",
            "b6cbfe1490c47327",
            "f7a7be7a0e123437",
            "47b4fe84c65433b7",
            "2f5d44534bd6cda0",
            "5edf13b6687c4f17",
            "d4f9d1c1e87e5089",
            "525709bd12edf5dc",
            "011f62d30ad9ddba",
            "5df122ece07b47d8",
            "632111c5925aad7b",
            "e38af4b60dbf5aa0",
            "61f1a36afaa86fa9",
            "dabd198d46369e02",
            "53d254d1f82445d1",
            "b95e6898c6204ca7"
        ],
        "x": 34,
        "y": 759,
        "w": 712,
        "h": 462
    },
    {
        "id": "87c145960b084571",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Central MQTT settings",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "21a18ea2e1ad8272",
            "5153ee6eaec2719e",
            "8b6a96f5a2389572",
            "2b842f86e3188add",
            "64b2b2f490422add",
            "165c02712f3be090",
            "6f29aba2255523db",
            "1f4be466c6c042be",
            "3675b231c34ac408"
        ],
        "x": 34,
        "y": 499,
        "w": 672,
        "h": 202
    },
    {
        "id": "e627636302ea6792",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Central save file location",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "497bdccfe154392a",
            "a07930a8fd8e086a",
            "71d73ac3c7e30c13",
            "14fcb836691f492f",
            "a4c151fd90dbb568",
            "cbcc4c5a1246a705"
        ],
        "x": 34,
        "y": 359,
        "w": 432,
        "h": 122
    },
    {
        "id": "e2c31040ddc1fcda",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Last Seen and Battery Notification",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "f06448c924017c80",
            "4b60f76a85ff02d0",
            "b33e7564e8249ced",
            "e6908d297f7434be",
            "2478d2093ca968a8",
            "5311b23b7deb8576"
        ],
        "x": 34,
        "y": 4159,
        "w": 892,
        "h": 122
    },
    {
        "id": "47441918f76973cc",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Download knop flows.json",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "549dc8a1370ad848",
            "ed44c5d723dd2703",
            "645e03d30417d02d",
            "cbf55c2280b493a8",
            "8470b085c7e0dc50",
            "c417508cbefbff39",
            "3c58c7178648d26e",
            "8914f9646ddd0f68",
            "c6506ebeef840f35",
            "3d912e3c710760d7",
            "1ce1a03f8933cdea",
            "bdda1b2043d5bcb1"
        ],
        "x": 34,
        "y": 3719,
        "w": 1232,
        "h": 122
    },
    {
        "id": "6df92418db148270",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Save file location",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "39c3822d0a5c1f75",
            "32c65441eb5e96fd",
            "071868fae5f54a46",
            "0b83dd0ca5f4aded",
            "7644c100ce6ffe03",
            "385851c29af725d0",
            "59778568d02a59d7",
            "0d55e5b84b1b3f41",
            "3c6303b4a9a4b2af",
            "18952938b648d436",
            "07999f363fbe8dd1",
            "e7cb21650396d634",
            "52c0b76f27e1d1aa",
            "1918adce4580e414",
            "004a2f298cc7f4fe",
            "f431078916cbc6d0",
            "0c97f9a91d714d41",
            "2c4e087f61e2f251",
            "0b0a53e9e3da23e4",
            "694cc1a696e53715"
        ],
        "x": 34,
        "y": 3859,
        "w": 1182,
        "h": 282
    },
    {
        "id": "53cf74558832dc34",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Set flow.get(tztest) na deploy",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "9028641e3cd5d6e3",
            "81a507f5f81cbaaf",
            "35423dfa967f1cf6",
            "6eea92a8ec156905",
            "a40ad40a012544c0",
            "7f851b7b8f8f34a8",
            "a8fb71bf971d986c",
            "5847a9f030315d2f",
            "7d2092fa4e91fc3b",
            "7707f8fb4b5a2caa",
            "f8740aaed87bd41d",
            "638d2b223ae9f7ab",
            "d722c5e177767eda",
            "0e0839e6243f9757",
            "e9716480c1c3ad78",
            "240845503160872e",
            "bddd27a7de3806fd",
            "22d4eb8470e7d47b"
        ],
        "x": 34,
        "y": 2499,
        "w": 1442,
        "h": 182
    },
    {
        "id": "f9c91086607bc42e",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Set telegram settings",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "ee14456093c642ae",
            "21850dcc45e2382d",
            "63f0dd7b943e2d88",
            "cbf354f448d7609e",
            "8df879b0f01694f6",
            "05c29c01d7a525f2",
            "3be3c709f83c4a7c",
            "efd8529718fb9924",
            "7856886803b859f9",
            "8cd52e02a5b87194",
            "7c7f93cf867fdd2c",
            "956b8bc8609a7849"
        ],
        "x": 34,
        "y": 3499,
        "w": 1292,
        "h": 202
    },
    {
        "id": "1b078b4e3cb34041",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Set flow.get(telegrambot+chatid) na deploy",
        "style": {
            "label": true,
            "stroke": "#3f93cf",
            "color": "#3f93cf"
        },
        "nodes": [
            "2d5dcb4304a0901a",
            "f897010fb19eecc9",
            "24b8247762331bc4",
            "3962c8aa5f389acc",
            "cf994b3878b086ab",
            "9a04b22efb979b25",
            "6aba90f378f86134",
            "4ee5d0c3b24afb48",
            "8059f74a1505fd2d",
            "2ddd3e5049ca712a",
            "11baf83766458e57",
            "d0bde3c507cbec9f",
            "65b7fc994ed8a9d5",
            "1aa46d9667bcf55b"
        ],
        "x": 34,
        "y": 2999,
        "w": 1372,
        "h": 202
    },
    {
        "id": "28dfc6fdcd950d23",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Ikea devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "c1a9327434e772d9",
            "77821154c471b317",
            "23593717f7fe9bcb",
            "c32e30cbaf14dacf",
            "56101de5381ca56f",
            "7c015677814352ca",
            "8ab850f412826e0f",
            "0e90369a7bd0020b",
            "ac05d7de1daf1c67",
            "90fad3910c548d2d",
            "a2c90bdd9a686312",
            "34afe7cbdf432008",
            "fb7bbf24b18c4851",
            "5a804b927b966214",
            "2e499290ea8e9d20"
        ],
        "x": 2414,
        "y": 679,
        "w": 932,
        "h": 202
    },
    {
        "id": "0f6bc3859b4040f9",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Telegram message when battery empty",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "722964375447a11c",
            "144028cd07e14cc0",
            "ba374ef64705c27c",
            "4cf0d157f69399af",
            "68e597a35b167ed3",
            "e59aeb6c6da687f0",
            "abb67ac8725e4c02",
            "0b895bad584b8ede",
            "e6495878d9955d69",
            "31a5813a01e2c9ad",
            "2b2e3a4c8540bc5c",
            "10d0a5d36c401e81",
            "138f3ea397843793",
            "6be18c5ff0c8b177",
            "49e7f8b48d2981ed",
            "0867179dfb6230ed",
            "829cd14f7ef6f997"
        ],
        "x": 34,
        "y": 1239,
        "w": 2152,
        "h": 182
    },
    {
        "id": "04acacbecb0f84cc",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Zigbee tabel idx",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "aaecdcfdf9cf3823",
            "917edbd60f8a6a98",
            "9b5a6ae6a1a17500",
            "db76dbdffa4c771c",
            "7cf8d097a03d869e",
            "6c0b13f331a8d5ac",
            "a5888a10dcb3b23b",
            "b62211e0bf840a63",
            "7a1da07ae34fdbec",
            "6066fabd07bffd11",
            "e15624da3381d18d",
            "a4613fae4c6af158",
            "175d8a0f8392a4fb",
            "22bc165f15374f0d",
            "a68bdd792cce06d3",
            "2c3b13516944f833",
            "4bad540cbb6e9d3d",
            "a82c28a2cce522e8",
            "0675b7440d474898",
            "022bf35bafb55495",
            "dbcd0e5f4e5f6777",
            "d19d8dedaece1a86",
            "0b91797038f5c6a3"
        ],
        "x": 34,
        "y": 1439,
        "w": 1912,
        "h": 202
    },
    {
        "id": "90fb73daae47154a",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Filter data ",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "596888160b07e1dd",
            "ec5442af7a61b18c",
            "3fea976568dc5293",
            "16bb7ab786b49c0b",
            "aa874e9d3c0e366a",
            "6fd48d92a8aceab9",
            "1bd2479b863055f2",
            "c84776ff094961fc",
            "2dfbd15d06e1123e",
            "039e9bf351a7b143",
            "ab9cd0be56afb360",
            "9239471a71e1357b",
            "82ac70ac0ee85bce",
            "74230db59e036f46",
            "4d1e6dd41075fd9f",
            "21e0778d66ee3309",
            "04d47cb1cb469536",
            "5215638dcce7a520",
            "939541484e46da80",
            "728f5ec0a8ba8680",
            "2ae94a4c793aca1e",
            "e2b0da749269d59a",
            "eb1a54f4e46337ec",
            "f33352081429e5df",
            "41cedbf540e58243",
            "1337b0adf2cad739",
            "b79124fc8292912c"
        ],
        "x": 814,
        "y": 739,
        "w": 1372,
        "h": 482
    },
    {
        "id": "be20e57190035e20",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Philips devices",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "bab452cce1c37ce8",
            "0949a569c2ba16fe",
            "83b3ad54f095fa2f",
            "8a1174008e15e359"
        ],
        "x": 2414,
        "y": 1999,
        "w": 972,
        "h": 82
    },
    {
        "id": "50fbc45746000899",
        "type": "group",
        "z": "3c1abf359e6df878",
        "name": "Standaard zigbee nodes",
        "style": {
            "stroke": "#3f93cf",
            "label": true,
            "color": "#3f93cf"
        },
        "nodes": [
            "ad09533520502602",
            "a055120ed19f9044",
            "ab1f478b73c08bc7",
            "c34f602ad8bccc63",
            "36a07c9d36434013",
            "0358bf193f1f1dd8",
            "b44b0868eed7faa8",
            "95f61cdfbd2a6673",
            "a4ba7dd1095cec68",
            "1024b7339f81dbdd",
            "6d6872d63d570b48",
            "b21a01ac9c8c45e3",
            "d635886cf9f08538",
            "9639d38023fc8ef8",
            "4a1dc2876fecea47",
            "e2e2746526d5ea52",
            "bece6aa5385e92fa",
            "39c0f98e24b8ec72",
            "b598e9736ebb53ed",
            "5293ae9cf3d6c668",
            "71b10117abc10427",
            "752d7fe6b164e397",
            "8853f3a4da21ed12",
            "b3c21a790b269911",
            "97b137d1b50a1111",
            "6f6fe1db1f77af84",
            "62956d3ddbebb8e6",
            "4c242ca317c2b3c4",
            "62b9282bdb64fd9b",
            "c28e1d455bfdd201",
            "f1beec20c9c89685"
        ],
        "x": 2414,
        "y": 39,
        "w": 992,
        "h": 482
    },
    {
        "id": "b346280fe3116ccd",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "Tasmota commands",
        "info": "ZbPermitJoin 1 = pairing mode voor 60sec\n\nZbName = Friendly name invoeren\n   voorbeeld: ZbName 0x2590,Test_deurcontact\n   \nZbForget <device> = verwijderen device\n\nChange channel:\nZbConfig {\"Channel\":12}\n\nChange panid:\nZbConfig {\"PanID\":\"0x1A69\"}\nhttps://tasmota.github.io/docs/Commands/#zbconfig",
        "x": 110,
        "y": 160,
        "wires": []
    },
    {
        "id": "3fea292a07dd0b6e",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, MQTT server to dashboard",
        "links": [
            "165c02712f3be090"
        ],
        "x": 1765,
        "y": 580,
        "wires": [
            [
                "38d81194cb2dc0ab"
            ]
        ]
    },
    {
        "id": "34cb19758421819a",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "f8c9fe6685106ccb",
        "name": "Osram mini switch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8fe122afb9794fac",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl Livarno RGB Bulb",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 980,
        "wires": []
    },
    {
        "id": "c76c62c4b7eab95f",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "Heiman CO detector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 580,
        "wires": []
    },
    {
        "id": "f823747d66d9026e",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "f8c9fe6685106ccb",
        "name": "SZ2D, Osram mini switch in",
        "links": [
            "e1ff2de83f9489a5"
        ],
        "x": 3035,
        "y": 1200,
        "wires": [
            [
                "34cb19758421819a"
            ]
        ]
    },
    {
        "id": "e1ff2de83f9489a5",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "f8c9fe6685106ccb",
        "name": "SZ2D, Osram mini switch out",
        "mode": "link",
        "links": [
            "f823747d66d9026e",
            "2b842f86e3188add"
        ],
        "x": 2965,
        "y": 1200,
        "wires": []
    },
    {
        "id": "3e65177545f26e89",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Livarno RGB in",
        "links": [
            "54aecbceaa8fc8a8"
        ],
        "x": 3035,
        "y": 980,
        "wires": [
            [
                "8fe122afb9794fac"
            ]
        ]
    },
    {
        "id": "54aecbceaa8fc8a8",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Livarno RGB out",
        "mode": "link",
        "links": [
            "21e0778d66ee3309",
            "3e65177545f26e89",
            "4c242ca317c2b3c4"
        ],
        "x": 2715,
        "y": 980,
        "wires": []
    },
    {
        "id": "3123ca787474829f",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "SZ2D, Heiman CO in",
        "links": [
            "a9a40afb90f39708"
        ],
        "x": 3035,
        "y": 580,
        "wires": [
            [
                "c76c62c4b7eab95f"
            ]
        ]
    },
    {
        "id": "a9a40afb90f39708",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "SZ2D, Heiman CO out",
        "mode": "link",
        "links": [
            "3123ca787474829f",
            "b21a01ac9c8c45e3"
        ],
        "x": 2715,
        "y": 580,
        "wires": []
    },
    {
        "id": "75577099e3b47b5d",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "d": true,
        "name": "SZ2D, Flogger link",
        "links": [],
        "x": 245,
        "y": 320,
        "wires": [
            [
                "b8de8f741884c2ee"
            ]
        ]
    },
    {
        "id": "73bee147db0c1049",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "name": "Not in the tasmota ID filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 660,
        "wires": []
    },
    {
        "id": "595f6ca5c4e49fed",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "V2_28-03-2023_R1_beta",
        "info": "V2 28-03-2023 R1 Beta:\n- Beta test V2\n14-03-2023 R1 beta:\n- Toegevoegd: Philips hue lux A19 bulb E27 (niet getest)\n12-03-2023 R1 beta:\n- Toegevoegd: Tuya TS011F powerplug (niet getest)\n- Gewijzigd: Enkele teksten aangepast in UI, om meer duidelijkheid te krijgen\n08-03-2023 R1:\n- Toegevoegd: Stuur telegram bericht als batterij percentage onder threshold waarde komt\n06-03-2023 R1:\n- Toegevoegd: Device Offline, optioneel instelbaar geeft dit een telegram bericht. \n05-03-2023 R1:\n- Aangepast: Trigger interval tbv telegram bericht batterij laag melding toegevoegd (1x per 24uur)\n  Opmerking: Palette node \"node-red-contrib-schedex\" moet worden geinstalleerd in nodered.\n04-03-2023 R1:\n- Toegevoegd: Stuur telegram bericht als batterij voltage onder threshold waarde komt\n16-01-2023 R1:\n- Aanpassing: flow geschikt gemaakt voor Nodered release V2.X.X en V3.X.X\n13-01-2023 R1:\n- Bug: Save data folder werd te laat ingelezen, waardoor device restore fout liep.\n  Wat dient men na te kijken voor deze bug oplossing:\n  In flow staan links boven 2 nodes met de namen:\n    ** Pi file save location **\n    ** Docker file save location **\n  Pas de gewenste file voor jouw omgeving aan, naar een directory die betaat\n  In deze directory wordt de file \"zigbeeidxtabel.txt\" weggeschreven\n  Past men later de directory aan, dan moet \"zigbeeidxtabel.txt\" handmatig worden overgezet\n  \n  default \"Pi file save location\" = /home/pi/domoticz/plugins/tasmota2zigbee\n  default \"Docker file save location\" = /data/saved-files/tasmota2zigbee\n10-01-2023 R1:\n- Aanpassing: Flow aangepast, save data folder kan op 1 plek worden ingesteld\n25-12-2022 R1:\n- Aanpassing: Flow aangepast voor eenvouding aanpassen MQTT server\n03-12-2022 R1:\n- Toegevoegd: ZbLeave en ZbForget bij device verwijderen\n25-05-2022 R1:\n- Aanpassing: \"Endpoint\":1 toegevoegd aan Sonoff S26R2ZB\n- Aanpassing: Sonoff SNZB-02, bij missende data toch bericht versturen.\n- Aanpassing: Device namen worden beter in tabellen toegevoegd/verwijdert\n23-05-2021 R1:\n- Bug:        Domoticz commands voor sonoff werden niet gerouteerd in UI table\n22-05-2021 R1:\n- Toegevoegd: Sonoff SNZB-02\n19-05-2022 R1:\n- Toegevoegd: Sonoff S26R2ZB\n17-05-2022 R1:\n- Toegevoegd: Lidl HG06620 \n- Bug:        Variable vendor bug opgelost (Met dank aan Appiesan)\n24-04-2022 R1:\n- Aanpassing: Verwijderen device uit IDX-tabel vraagt eerst om bevestiging alvorens te verwijderen\n17-04-2022 R2:\n- Bug:        Wegschrijven naam bij set idx ging niet goed, werd bridge/zigbeeid getoond\n17-04-2022 R1:\n- Toegevoegd: Ikea motion E1525\n- Toegevoegd: Ikea motion E1745\n- Toegevoegd: Heiman rookmelder HS1SA\n- Toegevoegd: Sonoff motion SNZB-03\n- Aanpassing: Menu gebruiksvriendelijker gemaakt\n11-04-2022 R2:\n- Aanpassing: Check op ikea flow data, om error te voorkomen\n11-04-2022 R1:\n- Aanpassing: Lidl TS0601: idxextra werkte niet correct\n10-04-2022 R3:\n- Aanpassing: In \"Set idx nummers en idx tabel\" een aanpassing doorgevoerd\n10-04-2022 R2:\n- Toegevoegd: Button \"Hoe device instellen domoticz\"\n10-04-2022 R1:\n- Toegevoegd: Tuya switch 4-buttons\n09-04-2022 R2:\n- Toegevoegd: Lidl HG06335/HG07310 \n09-04-2022 R1:\n- Toegevoegd: Debug mqtt veld in UI\n- Toegevoegd: Xiaomi smart home cube\n- Aanpassing: Als IDX 0 is, dan gaat er geen bericht naar domoticz\n08-04-2022 R1:\n- Toegevoegd: Lidl HG06336\n- Toegevoegd: Lampen (RGB/CCT) lidl toegevoegd\n05-04-2022 R2:\n- Aanpassing: Lidl HG06106B, dat CT en RGB mogelijk is.\n05-04-2022 R1:\n- Toegevoegd: Lidl HG06106B\n01-04-2022 R1:\n- Aanpassing: Optie om de custom domoticz pagina in te stellen toegevoegd\n17-02-2022 R1: \n- Gestart met Versie nummers",
        "x": 130,
        "y": 40,
        "wires": []
    },
    {
        "id": "57661677b89a1e7b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "store Tasmota Info",
        "func": "var devs; \n\nif ( msg.src === 'restore' ) {\n    devs = flow.get(\"tasmotas\") || {};\n    return {payload:Object.values(devs)};\n} else {\n\n    devs = flow.get(\"tasmotas\") || {};\n\n    // extract devname\n    let devName = msg.topic.split(\"/\")[1];\n\n    // get dev by name\n    let dev = devs[devName] || {};\n    dev.lastTime = new Date().getTime();\n\n    // extract data from msg\n    if (msg.topic.includes(\"SENSOR\")) {\n        if (msg.payload.ZbReceived !== undefined) {\n            dev.zigbee = true;\n        } else {\n            dev.zigbee = false;\n            return;\n        }\n    } else if (msg.topic.includes(\"STATE\")) {\n        dev.STATE = msg.payload;  \n    } else if (msg.topic.includes(\"STATUS5\")) {\n        dev.STATUS5 = msg.payload; \n        dev.link = \"<a href=http://\"+msg.payload.StatusNET.IPAddress+\" target=\\\"_blank\\\">\"+devName+\"</a>\";\n    } else if (msg.topic.includes(\"STATUS2\")) {\n        dev.STATUS2 = msg.payload;  \n    } else if (msg.topic.includes(\"INFO2\")) {\n        dev.INFO2 = msg.payload; \n        dev.link = \"<a href=http://\"+msg.payload.IPAddress+\" target=\\\"_blank\\\">\"+devName+\"</a>\";\n    } else if (msg.payload.ZbState !== undefined) {\n        dev.ZbState = msg.payload.ZbState;  \n        dev.zigbee = true;\n    } \n\n    // set name/link\n    dev.name = devName;\n    if (dev.link === undefined) dev.link = dev.name;\n   \n    // calc last seen\n    Object.entries(devs).forEach(element => element[1].seen = Math.round((new Date().getTime()-element[1].lastTime)/60000)+\"m\");\n\n   // write back\n   devs[devName] = dev;\n   flow.set(\"tasmotas\", devs);\n\n   return {payload:Object.values(devs)};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 3320,
        "wires": [
            [
                "c39ad7d28bcdc7d9",
                "2a5fa43295007d84"
            ]
        ]
    },
    {
        "id": "63ef986b5d216961",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "store zigbee sensors",
        "func": "let devs; \nlet status = \"update\";\n\nif ( msg.src === 'restore' ) {\n    devs = flow.get(\"t2zdevices\") || {};\n    return [{payload:Object.values(devs)}, {payload:Object.values(devs)}];\n} else if (msg.payload.ZbReceived === undefined) {\n    return;\n} else {\n\n    let checkname;\n    for (var devN in msg.payload.ZbReceived) {\n        checkname = msg.payload.ZbReceived[devN].Name;\n    }\n\n    // properties that should  show up in the status\n    let inStatus = [\"Contact\", \"Occupancy\", \"Power\", \"Power2\", \"Dimmer\", \"Hue\", \"CT\", \"ColorMode\", \"Sat\", \"RGB\", \"RGBb\", \"Temperature\", \"Humidity\", \"Pressure\", \"LocalTemperature\", \"OccupiedHeatingSetpoint\", \"PIHeatingDemand\", \"Illuminance\", \"AqaraVibrationMode\", \"AqaraVibrationsOrAngle\", \"AqaraVibration505\", \"ZoneStatusChange\", \"AqaraCube\", \"AqaraCubeSide\", \"AqaraCubeFromSide\", \"AqaraRotate\"];\n\n    // properties that should not show up in the status\n    let notStatus = [\"Device\", \"Name\", \"BatteryVoltage\", \"BatteryPercentage\", \"LinkQuality\", \"Endpoint\", \"bridge\", \"lastTime\", \"seen\", \"label\", \"status\", \"EurotronicErrors\", \"0201/4008\", \"Xiaomi_64\"];\n\n    //node.warn(msg.payload);\n    devs = flow.get(\"t2zdevices\") || {}; \n\n    let update;\n    update = {payload:Object.values(devs)};\n    \n    let devt = flow.get(\"t2ztable\") || {};\n    let length = Object.keys(devt).length;\n    \n    for ( var i = 0; i < length; i++ ) {\n        let keys = Object.keys(devt);\n        let IDkey = keys[i];\n        let message = devt[IDkey].zigbeeid;\n        //If this is true, no update is send\n        let name = devt[IDkey].name;\n        if (checkname === name ) {\n            status = \"no-update\";\n        }\n        if (msg.payload.ZbReceived[message]) {\n            if (devt[IDkey].vendors !== \"onbekend\") {\n                update = null;\n            }\n        }\n    }\n \n    let receivedSensors = []\n    for (var devN in msg.payload.ZbReceived) {\n        let devInfo = msg.payload.ZbReceived[devN];\n        let ID = devInfo.Device;\n    \n        // get dev by ID\n        let dev = devs[ID] || {};\n\n        for (let prop in devInfo) {\n            dev[prop] = devInfo[prop];\n        }\n    \n        if (devInfo.Name!==undefined) {\n            dev.label = devInfo.Name;\n        } else {\n            dev.label = ID; \n        }\n        dev.bridge = msg.topic.split(\"/\")[1];\n        dev.lastTime = new Date().getTime();\n    \n        // create status from properties\n        let status = \"\";\n        for (let prop in dev) {\n            if (inStatus.includes(prop)) {\n                status += \" \"+prop+\": \"+ dev[prop]; \n            }\n        }\n        if (status === \"\") {\n            for (let prop in dev) {\n                if (! notStatus.includes(prop)) {\n                    status += \" \"+prop+\": \"+ dev[prop]; \n                }\n            }   \n        }\n        dev.status = status;\n    \n        // write back\n        devs[ID] = dev;\n       receivedSensors.push(dev);\n    }\n   \n    Object.entries(devs).forEach(element => element[1].seen = Math.round((new Date().getTime()-element[1].lastTime)/60000)+\"m\");\n    \n    flow.set(\"t2zdevices\", devs);\n\n    //return [{payload:Object.values(devs)}, {payload:receivedSensors}];\n    return [update, {topic: status, payload:Object.values(devs)}];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 2820,
        "wires": [
            [
                "181857d6dea426c9"
            ],
            [
                "aa9fa71984e8f14c",
                "5453042ca5706d12"
            ]
        ]
    },
    {
        "id": "f62a34e914812bfa",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "a30abff9e7ac609d",
        "name": "Send probe",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "14400",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "ds",
        "payloadType": "str",
        "x": 150,
        "y": 4340,
        "wires": [
            [
                "474b28a05a0f5191"
            ]
        ]
    },
    {
        "id": "474b28a05a0f5191",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "a30abff9e7ac609d",
        "name": "Probe status",
        "func": "\nvar msg1 = { topic:\"cmnd/sonoffs/STATUS\", payload:\"5\" };\nvar msg2 = { topic:\"cmnd/tasmotas/STATUS\", payload:\"5\" };\nvar msg3 = { topic:\"cmnd/sonoffs/STATUS\", payload:\"2\" };\nvar msg4 = { topic:\"cmnd/tasmotas/STATUS\", payload:\"2\" };\nreturn [ [msg1, msg2, msg3, msg4] ];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 4340,
        "wires": [
            [
                "1ee36b4fc499eabe"
            ]
        ]
    },
    {
        "id": "f06448c924017c80",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "name": "Check LastSeen and Battery",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "18000",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 4200,
        "wires": [
            [
                "4b60f76a85ff02d0",
                "2478d2093ca968a8"
            ]
        ]
    },
    {
        "id": "4b60f76a85ff02d0",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "name": "Check Zigbee lastseen and Battery",
        "func": "\nvar devs = flow.get(\"t2zdevices\") || {};\n\nvar warning = \"\";\nfor (var devN in devs) {\n    let devInfo = devs[devN];\n    //node.warn(devInfo.seen + \" \" + devInfo.BatteryPercentage);\n    if (devInfo.BatteryPercentage !== undefined && devInfo.BatteryPercentage < 25) {\n         //node.warn(devInfo.Name + \" Battery Low: \" + devInfo.BatteryPercentage);\n         warning += \"\\t\" + devInfo.Name + \" battery low : \" + devInfo.BatteryPercentage + \"%\\n\"\n    }\n    if (parseInt(devInfo.seen) > 720) {\n         //node.warn(devInfo.Name + \" seems offline: \" + devInfo.seen);\n         warning += \"\\t\" + devInfo.Name + \" seems offline: \" + devInfo.seen + \"\\n\"\n    }\n}\n\n//node.warn(warning);\nif (warning !== \"\") {\n    msg.payload = \"Zigbee Devices: \" + warning;\n    msg.sound = \"none\";\n    return msg;\n}\n\nreturn null;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 4200,
        "wires": [
            [
                "b33e7564e8249ced",
                "5311b23b7deb8576"
            ]
        ]
    },
    {
        "id": "e6908d297f7434be",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "name": "Check Tasmota lastseen",
        "func": "\n\nvar devs = flow.get(\"tasmotas\") || {};\n\nvar warning = \"\";\nfor (var devN in devs) {\n    let devInfo = devs[devN];\n    //node.warn(devInfo.name + \" \" + devInfo.seen);\n    if (parseInt(devInfo.seen) > 60) {\n         //node.warn(devInfo.name + \" seems offline: \" + devInfo.seen);\n         warning += \"\\t\" + devInfo.name + \" seems offline: \" + devInfo.seen + \"\\n\"\n    }\n}\n\n//node.warn(warning);\nif (warning !== \"\") {\n    msg.payload = \"Tasmota Devices: \" + warning;\n    msg.sound = \"none\";\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 4240,
        "wires": [
            [
                "b33e7564e8249ced",
                "5311b23b7deb8576"
            ]
        ]
    },
    {
        "id": "2478d2093ca968a8",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 260,
        "y": 4240,
        "wires": [
            [
                "e6908d297f7434be"
            ]
        ]
    },
    {
        "id": "5311b23b7deb8576",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "name": "SZ2D, SensorsProblem Notification",
        "mode": "link",
        "links": [],
        "x": 755,
        "y": 4240,
        "wires": []
    },
    {
        "id": "c39ad7d28bcdc7d9",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "filter Zigbee Bridges",
        "func": "let zbBridges = msg.payload.filter(function(el) {\n      return el.zigbee === true;\n  })\n\nmsg.payload = zbBridges;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 3440,
        "wires": [
            [
                "9c7d7e642c182712"
            ]
        ]
    },
    {
        "id": "9c7d7e642c182712",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "extract devicenames",
        "func": "msg.options = msg.payload.map(obj => {\n   return obj.name;\n});\n\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 3440,
        "wires": [
            [
                "4949e67efbb98f5e",
                "43a0d048ad0eaf62"
            ]
        ]
    },
    {
        "id": "1ae8a6e9245eaf9b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "permitJoin",
        "func": "\nmsg.topic = \"cmnd/\"+msg.payload+\"/ZbPermitJoin\";\nmsg.payload = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 3440,
        "wires": [
            [
                "bcfca4459487c695"
            ]
        ]
    },
    {
        "id": "ccd7bcb7f8c89243",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "Del zigbee bridge",
        "func": "if (msg.topic === \"link\") {\n    return;\n}\n\nif (msg.topic === \"del\") {\n    var devs = flow.get(\"tasmotas\") || {};\n    delete devs[msg.payload.name];\n    msg.topic = \"Bridge: \" + msg.payload.name + \" is verwijdert.\";\n    msg.payload = \"Sonoff bridge is niet buiten werking gezet, alleen verwijdert op deze pagina.\"\n    return msg;\n}\n\nmsg.topic = msg.payload.name;\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 3260,
        "wires": [
            [
                "08606a538ebd86e8",
                "e0c4e7e805ce942c"
            ]
        ]
    },
    {
        "id": "988d277cc68cd08c",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 2040,
        "wires": [
            [
                "d8fc7deb0b2e7cff"
            ]
        ]
    },
    {
        "id": "d7f390a0f8117a1e",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1530,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "8e1defee4ffe54e7",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Clear",
        "func": "flow.set(\"renameZigbee\", {});\ndelete msg.payload;\nmsg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2440,
        "wires": [
            [
                "d1bcc76c7b3434a0",
                "f6bb43b8dea1c052",
                "062f1f55585b2819",
                "2944f3356aaf0eb2",
                "6d333231e93d9f20",
                "084a7f42825dc139",
                "bf4c6cf80083e5d8",
                "047ec4ae74055c95",
                "8db776c57086a242",
                "943615acd1aeadfb"
            ]
        ]
    },
    {
        "id": "434d961017963f40",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Set Device settings",
        "func": "let optie1 = [\"Motion (RTCGQ12LM)\", \"Plug (TS011F)\"];\nlet optie2 = [\"Plug (TS011F)\"];\nlet optie3 = [\"Plug (TS011F)\"];\nlet optie4 = [\"Plug (TS011F)\"];\nlet optie5 = [];\nlet battery = [\"Monoxide (HS1CA-M)\", \"Smoke (HS1SA)\", \"Remote (E1743)\", \"Motion (E1525)\", \"Motion (E1745)\", \"Door (HG06336)\", \"Motion (HG06335)\", \"Motion (HG07310)\", \"Thermo (TS0601)\", \"Remote (AC0251100NJ)\", \"Remote (AC0251600NJ)\", \"Remote (AC0251700NJ)\", \"Motion (SNZB-03)\", \"Remote (SNZB-01)\", \"Temp (SNZB-02)\", \"Remote (TS0044)\", \"Cube (MFKZQ01LM)\", \"Door (MCCGQ12LM)\", \"Door (MCCGQ14LM)\", \"Lux (GZCGQ01LM)\", \"Motion (RTCGQ01LM)\", \"Motion (RTCGQ12LM)\", \"Smoke (JTYJ-GD-01LM/BW)\", \"Temp (WSDCGQ01LM)\", \"Temp (WSDCGQ11LM)\", \"Temp (WSDCGQ12LM)\", \"Water (SJCGQ11LM)\"];\nlet data1 = context.get(\"data1\") || null; //get from context or default to null\nlet data2 = context.get(\"data2\") || \"Niet ingesteld\" //get from context or default to 0\nlet data3 = context.get(\"data3\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data4 = context.get(\"data4\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data5 = context.get(\"data5\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data6 = context.get(\"data6\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data7 = context.get(\"data7\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data8 = context.get(\"data8\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data9 = context.get(\"data9\") || \"Niet ingesteld\"; //get from context or default to 0\nlet data10 = context.get(\"data10\") || \"Niet ingesteld\"; //get from context or default \nlet data11 = context.get(\"data11\") || \"Niet ingesteld\"; //get from context or default \n\nlet reconfig = flow.get(\"t2ztable\") || {};\n\nswitch (msg.topic){\n\n    case \"device\":\n        data1 = msg.payload; \n        context.set(\"data1\", data1);//store in context for next time \n        return;\n    \n    case \"vendor\":\n        data2 = msg.payload; \n        context.set(\"data2\", data2);//store in context for next time \n        return;\n    \n    case \"type\":\n        data3 = msg.payload; \n        context.set(\"data3\", data3);//store in context for next time \n        return;\n    \n    case \"idx\":\n        data4 = msg.payload; \n        context.set(\"data4\", data4);//store in context for next time \n        return;\n        \n    case \"idxoptie1\":\n        data5 = msg.payload;\n        context.set(\"data5\", data5); //store in context for next time \n        return;\n        \n    case \"idxoptie2\":\n        data6 = msg.payload;\n        context.set(\"data6\", data6); //store in context for next time \n        return;\n    \n    case \"idxoptie3\":\n        data7 = msg.payload;\n        context.set(\"data7\", data7); //store in context for next time \n        return;\n    \n    case \"idxoptie4\":\n        data8 = msg.payload;\n        context.set(\"data8\", data8); //store in context for next time \n        return;\n\n    case \"idxoptie5\":\n        data9 = msg.payload;\n        context.set(\"data9\", data9); //store in context for next time \n        return;\n\n    case \"lowbat\":\n        data10 = msg.payload;\n        context.set(\"data10\", data10); //store in context for next time \n        return;    \n\n    case \"offline\":\n        data11 = msg.payload;\n        context.set(\"data11\", data11); //store in context for next time \n        return;\n\n    case \"submit\":\n        if (data1 !== null ) {\n            let string = \"{\" + \"_/\" + data1 + \"/_/}\";\n            let array = string.split(\"/\")[2];\n            \n            let strings = \"{\" + \"_/\" + data1 + \"/_/}\";\n            let arrayname = string.split(\"/\")[3];\n            let receivedSensors = [];\n        \n            let dev = reconfig[array] || {};\n            dev.name = arrayname;\n            dev.vendors = data2;\n            dev.type = data3;\n            dev.idx = data4;\n            if (optie1.includes(data3)) {\n                dev.idxoptie1 = data5;\n            } else {\n                dev.idxoptie1 = \"n.v.t\";\n            }\n            if (optie2.includes(data3)) {\n                dev.idxoptie2 = data6;\n            } else {\n                dev.idxoptie2 = \"n.v.t\";\n            } \n            if (optie3.includes(data3)) {\n                dev.idxoptie3 = data7;\n            } else {\n                dev.idxoptie3 = \"n.v.t\";\n            }\n            if (optie4.includes(data3)) {\n                dev.idxoptie4 = data8;\n            } else {\n                dev.idxoptie4 = \"n.v.t\";\n            }\n            if (optie5.includes(data3)) {\n                dev.idxoptie5 = data9;\n            } else {\n                dev.idxoptie5 = \"n.v.t\";\n            }\n            if (battery.includes(data3)) {\n                dev.lowbat = data10;\n            } else {\n                dev.lowbat = \"Niet mogelijk\";\n            }\n            dev.offline = data11;\n            // write back\n            reconfig[array] = dev;\n            receivedSensors.push(dev);\n \n            flow.set(\"t2ztable\", reconfig);\n            context.set(\"data1\", null);\n        } else {\n            return;\n        }\n    }\n\nreturn [{payload:Object.values(reconfig)},msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2060,
        "wires": [
            [
                "988d277cc68cd08c"
            ],
            [
                "7aa47fa379fb1e6f"
            ]
        ]
    },
    {
        "id": "25a9669194c05d7c",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 2440,
        "wires": [
            [
                "8e1defee4ffe54e7"
            ]
        ]
    },
    {
        "id": "bcfca4459487c695",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "SZ2D, Manage zigbee bridge",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1345,
        "y": 3440,
        "wires": []
    },
    {
        "id": "7aa47fa379fb1e6f",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "SZ2D, Restore idx table (zigbee tabel)",
        "mode": "link",
        "links": [
            "7707f8fb4b5a2caa",
            "7a1da07ae34fdbec",
            "cb87da544c22dc52"
        ],
        "x": 1115,
        "y": 2080,
        "wires": []
    },
    {
        "id": "41142c143e2198fa",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "add src",
        "func": "msg.src = 'restore';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2820,
        "wires": [
            [
                "63ef986b5d216961"
            ]
        ]
    },
    {
        "id": "7f05c13d02221381",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "SZ2D, Restore zigbee table in",
        "links": [
            "7cf8d097a03d869e",
            "99de50d55ba8b434"
        ],
        "x": 205,
        "y": 2820,
        "wires": [
            [
                "41142c143e2198fa"
            ]
        ]
    },
    {
        "id": "e0c4e7e805ce942c",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "SZ2D, Restore bridges table out",
        "mode": "link",
        "links": [
            "6e6a7cbdfe39d0b4"
        ],
        "x": 1346,
        "y": 3260,
        "wires": []
    },
    {
        "id": "c40798c7801b4717",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "Del zigbee device status list",
        "func": "if (msg.topic === \"del\") {\n    var devs = flow.get(\"t2zdevices\") || {};\n    delete devs[msg.payload.Device];\n    msg.topic = \"Zigbee tabel: \" + msg.payload.label + \", \"  + msg.payload.Device + \" is verwijdert.\";\n    msg.payload = \"Device is niet verwijdert in de sonoff bridge, alleen op deze webpagina.\"\n    return msg;\n}\n\nmsg.topic = msg.payload.label;\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 2900,
        "wires": [
            [
                "a0a7ddab3ea31950",
                "99de50d55ba8b434"
            ]
        ]
    },
    {
        "id": "56af6ad4a7dbb1cb",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "add src",
        "func": "msg.src = 'restore';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 3320,
        "wires": [
            [
                "57661677b89a1e7b"
            ]
        ]
    },
    {
        "id": "6e6a7cbdfe39d0b4",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "SZ2D, Restore bridges table in",
        "links": [
            "e0c4e7e805ce942c"
        ],
        "x": 75,
        "y": 3320,
        "wires": [
            [
                "56af6ad4a7dbb1cb"
            ]
        ]
    },
    {
        "id": "99de50d55ba8b434",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "SZ2D, Restore zigbee table out",
        "mode": "link",
        "links": [
            "7f05c13d02221381"
        ],
        "x": 1425,
        "y": 2900,
        "wires": []
    },
    {
        "id": "549dc8a1370ad848",
        "type": "http in",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "url": "/flows.json",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 3800,
        "wires": [
            [
                "645e03d30417d02d"
            ]
        ]
    },
    {
        "id": "ed44c5d723dd2703",
        "type": "http response",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 3800,
        "wires": []
    },
    {
        "id": "645e03d30417d02d",
        "type": "http request",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "body",
        "url": "https://raw.githubusercontent.com/Hoeby/Sonoff-Zigbee-Tasmota-Nodered-flow/main/flows.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 3800,
        "wires": [
            [
                "c417508cbefbff39"
            ]
        ]
    },
    {
        "id": "195a967a4636242e",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "Wat instellen bij een nieuw device",
        "info": "Wat allemaal instellen bij een nieuw device\n\n* Tasmota ID filter on ui table\n  - Als het een nieuw merk betreft:\n      - In tab \"Setup\" de \"Outputs\" met 1 verhogen.\n      - In tab \"On Message\" de returns bij werken ivm 1 extra output. Let op, voor tasmota, tasmotainfo en domoticz zijn 3 aparte blocken\n      - Achter de ID filter natuurlijk de nieuwe functie node voor het device maken en toevoegen\n  - Als het een nieuw device is:\n      - Dan hierin niets doen, dan naar de uitgang van het juiste merk gaan, daar het type toevoegen en een nieuwe device block maken\n\n* Drop Down Vendors node voor webpagina\n  - Bij options een extra block aanmaken. De naam moet identiek zijn aan wat je bij de tasmota ID filter hebt ingevoerd.\n \n* Drop Down type node voor webpagina\n  - Bij options een extra block aanmaken. De naam moet identiek zijn aan wat je bij de Vendor naam filter hebt ingevoerd.\n  \n* Update \"Hoe device instellen in domoticz\"",
        "x": 150,
        "y": 200,
        "wires": []
    },
    {
        "id": "1ee36b4fc499eabe",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "a30abff9e7ac609d",
        "name": "SZ2D, Probe to get IP out",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 495,
        "y": 4340,
        "wires": []
    },
    {
        "id": "ee7c7b73069d4855",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "SZ2D, Zigbee Apparaat in",
        "links": [
            "197c850df2b84406"
        ],
        "x": 75,
        "y": 2060,
        "wires": [
            [
                "d743504d0f6f9807"
            ]
        ]
    },
    {
        "id": "12ababc6baf3c5d3",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "Send command to bridge",
        "func": "var send1;\nvar send2;\nvar send3;\n//var send1 = context.get(\"send1\") || \"empty\"; //get from context or default to 0\n//var send2 = context.get(\"send2\") || \"empty\"; //get from context or default to 0\n//var send3 = context.get(\"send3\") || \"empty\"; //get from context or default to 0\n\nswitch (msg.topic){\n\n    case \"bridge\":\n        send1 = msg.payload; \n        if (send1 == \"\") {\n            return;\n        } else {\n            context.set(\"send1\", send1);//store in context for next time \n        }\n        return;\n    \n    case \"command\":\n        send2 = msg.payload; \n        if (send2 == \"\") {\n            return;\n        } else {\n            context.set(\"send2\", send2);//store in context for next time \n        }\n        return;\n    \n    case \"parameter\":\n        send3 = msg.payload; \n        if (send1 == \"\") {\n            return;\n        } else {\n            context.set(\"send3\", send3);//store in context for next time \n        }\n        return;\n        \n    case \"submit\":\n        send1 = context.get(\"send1\")\n        send2 = context.get(\"send2\")\n        send3 = context.get(\"send3\")\n        if (send1 !== \"empty\" && send2 !== \"empty\" && send3 !== \"empty\" ) {\n            msg.payload = send1 + \" \" + send2 + \" \" + send3;\n            msg.topic = \"cmnd/\"+send1+\"/\"+send2;\n            msg.payload = send3;\n            context.set(\"send1\", \"empty\");\n            context.set(\"send1\", \"empty\");\n            context.set(\"send1\", \"empty\");\n            return msg;\n        } else {\n            return;\n        }\n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3320,
        "wires": [
            [
                "9d23bc19593e54ce"
            ]
        ]
    },
    {
        "id": "da9698b99df92917",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "Clear",
        "func": "//delete msg.payload;\nmsg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 3340,
        "wires": [
            [
                "e710f439523d7004",
                "312c0d8f079837a5"
            ]
        ]
    },
    {
        "id": "ebcfd11d58a87e26",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 3380,
        "wires": [
            [
                "da9698b99df92917"
            ]
        ]
    },
    {
        "id": "9d23bc19593e54ce",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "SZ2D, Send command to bridge",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1345,
        "y": 3320,
        "wires": []
    },
    {
        "id": "cbf55c2280b493a8",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 3760,
        "wires": [
            [
                "8470b085c7e0dc50"
            ]
        ]
    },
    {
        "id": "8470b085c7e0dc50",
        "type": "http request",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/Hoeby/Sonoff-Zigbee-Tasmota-Nodered-flow/main/version",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 3760,
        "wires": [
            [
                "bdda1b2043d5bcb1"
            ]
        ]
    },
    {
        "id": "7dc4dbe06640e371",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "Wat aanpassen bij een nieuwe release",
        "info": "- De \"comment\" node van de release notes.\n- Node \"UPDATE RELEASE\", de versie in aanpassen.\n- Node \"SCRIPT VERSION\", de versie in aanpassen.\n- Op github de \"version\" file aanpassen.\n- Op github de \"releasenotes\" file aanpassen.",
        "x": 170,
        "y": 240,
        "wires": []
    },
    {
        "id": "181857d6dea426c9",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "extract devicenames",
        "func": "\nmsg.options = msg.payload.map(obj => {\n   var rObj = {};\n   rObj[obj.label] = obj.bridge+\"/\"+obj.Device;\n   //rObj[obj.label] = obj.bridge+\"/\"+obj.Device+\"/\"+obj.Name+\"/\"\n   return rObj;\n});\n\nmsg.payload = {};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2740,
        "wires": [
            [
                "fd5a1b860aac7c4e"
            ]
        ]
    },
    {
        "id": "967ae676480e32a7",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "Rename Zigbee Dev.",
        "func": "let rename = flow.get(\"renameZigbee\") || {};\nflow.set(\"renameZigbee\", rename);\n\nif (msg.topic === \"oldname\" && msg.payload !== \"\") {\n    //var string = \"{\" + \"_/\" + data1 + \"/_/}\"\n    //var array = string.split(\"/\")[2];\n    var string = \"{\" + \"_/\" + msg.payload + \"/_/}\";\n    let vars = string.split(\"/\");\n    //let vars = msg.payload.split(\"/\");\n    rename.bridge = vars[1];\n    rename.device = vars[2];\n    flow.set(\"renameZigbee\", rename);\n    return;\n} else if (msg.topic === \"newname\") {\n    rename.newname = msg.payload;\n    flow.set(\"renameZigbee\", rename);\n    return;\n} else if (msg.topic === \"rename\") {\n    msg.topic = \"cmnd/\"+rename.bridge+\"/ZbName\";\n    msg.payload = rename.device + \",\" + rename.newname;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 2760,
        "wires": [
            [
                "2c116f8cfdc079dc",
                "a6ae547e6e0edc2c"
            ]
        ]
    },
    {
        "id": "2c116f8cfdc079dc",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "Clear",
        "func": "flow.set(\"renameZigbee\", {});\ndelete msg.payload;\nmsg.payload =\"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 2840,
        "wires": [
            [
                "65bf68ffd9acaa1f"
            ]
        ]
    },
    {
        "id": "a6ae547e6e0edc2c",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "SZ2D, Rename zigbee device",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1425,
        "y": 2760,
        "wires": []
    },
    {
        "id": "197c850df2b84406",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "SZ2D, Zigbee Apparaat out",
        "mode": "link",
        "links": [
            "ee7c7b73069d4855"
        ],
        "x": 855,
        "y": 2820,
        "wires": []
    },
    {
        "id": "283e83bbdfa0fece",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1240,
        "y": 2800,
        "wires": [
            [
                "a6ae547e6e0edc2c"
            ]
        ]
    },
    {
        "id": "9253d79996759524",
        "type": "template",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "help text",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "Command &nbsp&nbsp&nbsp&nbsp: Parameter <br>\n<br>\nZbPermitJoin : 0 = disable pairing mode <br>\nZbPermitJoin : 1 = enable pairing mode for 60 seconds <br>\n<br>\nSetOption83 : 0 = prefixed id wordt het id gebruikt <br>\nSetOption83 : 1 = prefixed id wordt naam gebruikt <br>\n<br>\nMore information: https://tasmota.github.io/docs/Commands/#zigbee <br>",
        "output": "str",
        "x": 1100,
        "y": 3380,
        "wires": [
            [
                "b1838a61f42b98ce"
            ]
        ]
    },
    {
        "id": "c417508cbefbff39",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "Make http header",
        "func": "var store = flow.get(\"version\")\nmsg.headers['Content-Disposition'] = 'attachment; filename=\"' + store + '.json\"'\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3800,
        "wires": [
            [
                "ed44c5d723dd2703"
            ]
        ]
    },
    {
        "id": "8914f9646ddd0f68",
        "type": "http request",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/Hoeby/Sonoff-Zigbee-Tasmota-Nodered-flow/main/releasenotes",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 810,
        "y": 3760,
        "wires": [
            [
                "3d912e3c710760d7"
            ]
        ]
    },
    {
        "id": "3d912e3c710760d7",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "Check response github",
        "func": "if (msg.statusCode === 200 || 201) {\n    return msg;\n} else {\n    msg.payload = '<p style=\"color:red;\">Fout bij laden release notes van github</p><br><a href=\"https://raw.githubusercontent.com/Hoeby/Sonoff-Zigbee-Tasmota-Nodered-flow/main/releasenotes\" target=\"_blank\">Link naar github, voor release notes</a>'\n    return msg;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 3760,
        "wires": [
            [
                "c6506ebeef840f35"
            ]
        ]
    },
    {
        "id": "e5338bba2c619bba",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-01 out",
        "mode": "link",
        "links": [
            "2b842f86e3188add",
            "bca36870516de147"
        ],
        "x": 2965,
        "y": 1300,
        "wires": []
    },
    {
        "id": "bca36870516de147",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-01 in",
        "links": [
            "e5338bba2c619bba"
        ],
        "x": 3035,
        "y": 1300,
        "wires": [
            [
                "41c0765bbbd40112"
            ]
        ]
    },
    {
        "id": "41c0765bbbd40112",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff SNZB-01 switch",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 1300,
        "wires": []
    },
    {
        "id": "e91ff9b4c2ed15cc",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "Welke modules installeren voor deze flow",
        "info": "Via manage pallette, onderstaande modules toevoegen\n- node-red-contrib-flogger\n- node-red-contrib-simple-gate\n- node-red-dashboard\n- node-red-node-ui-table\n- node-red-contrib-schedex",
        "x": 180,
        "y": 280,
        "wires": []
    },
    {
        "id": "8d13d2bc424f2865",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Device list",
        "func": "if (msg.payload === \"Heiman\") {\n    msg.options = [ \"Monoxide (HS1CA-M)\",\n                    \"Smoke (HS1SA)\"]\n}\nelse if (msg.payload === \"Ikea\") {\n    msg.options = [ \"Light (ICPSHC24-10EU-IL-1)\",\n                    \"Motion (E1525)\",\n                    \"Motion (E1745)\",\n                    \"Plug (E1603)\",\n                    \"Plug (E1702)\",\n                    \"Plug (E1708)\",\n                    \"Remote (E1743)\"]\n}\nelse if (msg.payload === \"Lidl\") {\n    msg.options = [ \"Plug (HG06620)\",\n                    \"Door (HG06336)\",\n                    \"Motion (HG06335)\",\n                    \"Motion (HG07310)\",\n                    \"Light (HG06106A)\",\n                    \"Light (HG06106B)\",\n                    \"Light (HG06106C)\",\n                    \"Light (HG06492A)\",\n                    \"Light (HG06492B)\",\n                    \"Light (HG06492C)\"]\n}\nelse if (msg.payload === \"Osram\") {\n    msg.options = [ \"Remote (AC0251100NJ)\",\n                    \"Remote (AC0251600NJ)\",\n                    \"Remote (AC0251700NJ)\"]\n}\nelse if (msg.payload === \"Philips\") {\n    msg.options = [\"Light (Lux A19 bulb E27)\"]\n}\nelse if (msg.payload === \"Sonoff\") {\n    msg.options = [ \"Motion (SNZB-03)\",\n                    \"Plug (S26R2ZB)\",\n                    \"Remote (SNZB-01)\",\n                    \"Temp (SNZB-02)\"]\n}\nelse if (msg.payload === \"Tuya\") {\n    msg.options = [ \"Remote (TS0044)\",\n                    \"Plug (TS011F)\" ]\n}\nelse if (msg.payload === \"Xiaomi\") {\n    msg.options = [ \"Cube (MFKZQ01LM)\",\n                    \"Door (MCCGQ12LM)\",\n                    \"Door (MCCGQ14LM)\",\n                    \"Lux (GZCGQ01LM)\",\n                    \"Motion (RTCGQ01LM)\",\n                    \"Motion (RTCGQ12LM)\",\n                    \"Smoke (JTYJ-GD-01LM/BW)\",\n                    \"Temp (WSDCGQ01LM)\",\n                    \"Temp (WSDCGQ11LM)\",\n                    \"Temp (WSDCGQ12LM)\",\n                    \"Water (SJCGQ11LM)\"]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 2260,
        "wires": [
            [
                "30aab3ba9b8254aa"
            ]
        ]
    },
    {
        "id": "bf0d38c8dfb35a00",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "Heiman devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Monoxide (HS1CA-M)\") {\n        return [msg, null]\n    } else if (msg.payload.ZbInfo.type === \"Smoke (HS1SA)\") {\n        return [null, msg]\n    }\n}    \n\nif (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Monoxide (HS1CA-M)\") {\n        return [msg, null]\n    } else if (msg.payload.ZbReceived.type === \"Smoke (HS1SA)\") {\n        return [null, msg]\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 600,
        "wires": [
            [
                "a9a40afb90f39708"
            ],
            [
                "a8b0c83b08b5b798"
            ]
        ]
    },
    {
        "id": "a6fca003696ee313",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Light (HG06492A)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Light (HG06492B)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Light (HG06492B)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Light (HG06106A)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Light (HG06106B)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Light (HG06106C)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Door (HG06336)\") {\n        return [null, null, msg, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Motion (HG06335)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Motion (HG07310)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Plug (HG06620)\") {\n        return [null, null, null, null, msg, null];\n    }\n}\n\nif (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Light (HG06492A)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Light (HG06492B)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Light (HG06492C)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Light (HG06106A)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Light (HG06106B)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Light (HG06106C)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Door (HG06336)\") {\n        return [null, null, msg, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Motion (HG06335)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Motion (HG07310)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Plug (HG06620)\") {\n        return [null, null, null, null, msg, null];\n    }\n}\n\nif ( msg.src === 'domoticz' ) {\n    if (msg.payload.type === \"Light (HG06492A)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.type === \"Light (HG06492B)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.type === \"Light (HG06492C)\") {\n        return [msg, null, null, null, null, null];\n    } else if (msg.payload.type === \"Light (HG06106A)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.type === \"Light (HG06106B)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.type === \"Light (HG06106C)\") {\n        return [null, msg, null, null, null, null];\n    } else if (msg.payload.type === \"Door (HG06336)\") {\n        return [null, null, msg, null, null, null];\n    } else if (msg.payload.type === \"Motion (HG06335)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.type === \"Motion (HG07310)\") {\n        return [null, null, null, msg, null, null];\n    } else if (msg.payload.type === \"Plug (HG06620)\") {\n        return [null, null, null, null, msg, null];\n    }\n}",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1020,
        "wires": [
            [
                "747b48f4aef4973c"
            ],
            [
                "54aecbceaa8fc8a8"
            ],
            [
                "adc88992cb43371c"
            ],
            [
                "7272d964025bfec8"
            ],
            [
                "22e0a3f2fcfd8827"
            ]
        ]
    },
    {
        "id": "855afc849e4e07ba",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f8c9fe6685106ccb",
        "name": "Osram devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Remote (AC0251100NJ)\") {\n        return [msg, null, null]\n    } else if (msg.payload.ZbInfo.type === \"Remote (AC0251600NJ)\") {\n        return [null, msg, null];\n    } else if (msg.payload.ZbInfo.type === \"Remote (AC0251700NJ)\") {\n        return [null, null, msg];\n    }\n}\n\nif (msg.payload.ZbReceived) {     \n    if (msg.payload.ZbReceived.type === \"Remote (AC0251100NJ)\") {\n        return [msg, null, null]\n    } else if (msg.payload.ZbReceived.type === \"Remote (AC0251600NJ)\") {\n        return [null, msg, null]\n    } else if (msg.payload.ZbReceived.type === \"Remote (AC0251700NJ)\") {\n        return [null, null, msg]\n    }\n}",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 1200,
        "wires": [
            [
                "cd524ca6d9fb70e5"
            ],
            [
                "cd524ca6d9fb70e5"
            ],
            [
                "cd524ca6d9fb70e5"
            ]
        ]
    },
    {
        "id": "9543bac4a8ed8022",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Remote (SNZB-01)\") {\n        return [msg, null, null, null]\n    } else if (msg.payload.ZbInfo.type === \"Motion (SNZB-03)\") {\n        return [null, msg, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Plug (S26R2ZB)\") {\n        return [null, null, msg, null];\n    } else if (msg.payload.ZbInfo.type === \"Temp (SNZB-02)\") {\n        return [null, null, null, msg];\n    }\n}\n\nif (msg.payload.ZbReceived) {        \n    if (msg.payload.ZbReceived.type === \"Remote (SNZB-01)\") {\n        return [msg, null, null, null]\n    } else if (msg.payload.ZbReceived.type === \"Motion (SNZB-03)\") {\n        return [null, msg, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Plug (S26R2ZB)\") {\n        return [null, null, msg, null];\n    } else if (msg.payload.ZbReceived.type === \"Temp (SNZB-02)\") {\n        return [null, null, null, msg];\n    }\n}\n\nif ( msg.src === 'domoticz' ) {\n    if (msg.payload.type === \"Remote (SNZB-01)\") {\n        return [msg, null, null, null]\n    } else if (msg.payload.type === \"Motion (SNZB-03)\") {\n        return [null, msg, null, null];\n    } else if (msg.payload.type === \"Plug (S26R2ZB)\") {\n        return [null, null, msg, null];\n    } else if (msg.payload.type === \"Temp (SNZB-02)\") {\n        return [null, null, null, msg];\n    }\n}",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 1360,
        "wires": [
            [
                "47872c93833c55aa"
            ],
            [
                "17345b5def7dd23b"
            ],
            [
                "6f900f263f675bab"
            ],
            [
                "16a24ac5537ce50d"
            ]
        ]
    },
    {
        "id": "bf4c6cf80083e5d8",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Clear option list",
        "func": "msg.options =[];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2440,
        "wires": [
            [
                "30aab3ba9b8254aa"
            ]
        ]
    },
    {
        "id": "f389a3e148f1774f",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Make custom page domoticz",
        "func": "var ipnodered = flow.get(\"ipnodered\") //|| null; //get from context or default to 0\nvar portnodered = flow.get(\"portnodered\")// || 0; //get from context or default to 0\nvar filelocation = flow.get(\"domoticzlocation\")\nvar version = flow.get(\"NoderedVersion\");\n\nswitch (msg.topic){\n\n    case \"ipnodered\":\n        ipnodered = msg.payload; \n        flow.set(\"ipnodered\", ipnodered);//store in context for next time \n        return;\n    \n    case \"portnodered\":\n        portnodered = msg.payload; \n        flow.set(\"portnodered\", portnodered);//store in context for next time \n        return;\n        \n    case \"domoticzlocation\":\n        var filelocationexcl = msg.payload; \n        filelocation = filelocationexcl + \"/tasmota_sonoff_bridge.html\"\n        flow.set(\"domoticzlocation\", filelocation);//store in context for next time \n        return;\n    \n    case \"Cancel\":\n        return;\n\n    case \"Submit\":\n        if (ipnodered !== null ) {\n            var file = flow.get(\"domoticzlocation\");\n            msg.filename = file; \n            msg.payload = '<IFRAME SRC=\"http://' + ipnodered + ':' + portnodered + '/ui\" height=\"800\" width=\"100%\"></IFRAME>';\n            var version = flow.get(\"NoderedVersion\");\n            var array = version.split(\".\");\n            if (Number(array[0]) < 3) {\n              return [msg, null];\n            } else {\n              return [null, msg];\n            }\n        }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1780,
        "wires": [
            [
                "b1d0596050a00834",
                "500af87dd2bbfa54"
            ],
            [
                "4fd1fcde19dcda86",
                "500af87dd2bbfa54"
            ]
        ]
    },
    {
        "id": "000b7d32fbef1c19",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "1880",
        "payloadType": "str",
        "x": 170,
        "y": 1800,
        "wires": [
            [
                "ad167f6132876101",
                "51559f405d494a4a"
            ]
        ]
    },
    {
        "id": "cb34f216441db05c",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "/home/pi/domoticz/www/templates",
        "payloadType": "str",
        "x": 170,
        "y": 1880,
        "wires": [
            [
                "3367132be1b787ed",
                "586c7b3c4ceaf806"
            ]
        ]
    },
    {
        "id": "048d3da4cfa3db4e",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Store ip details",
        "func": "if ( msg.src === 'ipnodered' ) {\n        var ipnodered = msg.payload; \n        flow.set(\"ipnodered\", ipnodered);//store in context for next time \n        return;\n}\n\nif ( msg.src === 'portnodered' ) {\n        var portnodered = msg.payload; \n        flow.set(\"portnodered\", portnodered);//store in context for next time \n        return;\n}\n\nif ( msg.src === 'domoticzlocation' ) {\n        var filelocationexcl = msg.payload; \n        var filelocation = \"\" + filelocationexcl + \"/tasmota_sonoff_bridge.html\"\n        flow.set(\"domoticzlocation\", filelocation);//store in context for next time \n        return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "3019006a9c24f3f2",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Add ip source",
        "func": "msg.src = 'ipnodered';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1740,
        "wires": [
            [
                "048d3da4cfa3db4e"
            ]
        ]
    },
    {
        "id": "51559f405d494a4a",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Add port source",
        "func": "msg.src = 'portnodered';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1820,
        "wires": [
            [
                "048d3da4cfa3db4e"
            ]
        ]
    },
    {
        "id": "586c7b3c4ceaf806",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Add file source",
        "func": "msg.src = 'domoticzlocation';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1900,
        "wires": [
            [
                "048d3da4cfa3db4e"
            ]
        ]
    },
    {
        "id": "8ad997bf75ad7416",
        "type": "exec",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "command": "/sbin/ip -4 -o addr show dev eth0| /usr/bin/awk '{split($4,a,\"/\");print a[1]}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "20",
        "winHide": false,
        "oldrc": false,
        "name": "GetIp",
        "x": 330,
        "y": 1720,
        "wires": [
            [
                "a4cfff7b4cdee380"
            ],
            [],
            []
        ]
    },
    {
        "id": "30abe158b9105fee",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 1720,
        "wires": [
            [
                "8ad997bf75ad7416"
            ]
        ]
    },
    {
        "id": "a4cfff7b4cdee380",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "Get IP2payload",
        "func": "var oldIP = msg.payload;\nvar newIP = oldIP.slice(0, oldIP.length-1);\nmsg.payload = newIP;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1720,
        "wires": [
            [
                "e963524b44203e38",
                "3019006a9c24f3f2"
            ]
        ]
    },
    {
        "id": "b1d0596050a00834",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1420,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "166782c42321912b",
        "type": "exec",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "command": "sudo /etc/init.d/domoticz.sh",
        "addpay": false,
        "append": "restart",
        "useSpawn": "false",
        "timer": "30",
        "winHide": false,
        "oldrc": false,
        "name": "Domoticz restart",
        "x": 1600,
        "y": 1800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "500af87dd2bbfa54",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1420,
        "y": 1800,
        "wires": [
            [
                "166782c42321912b"
            ]
        ]
    },
    {
        "id": "dd918635ed9f4fa3",
        "type": "template",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "opmerking tekst",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "LET OP, lees goed wat er staat.<br>\n<br>\nAls er op \"SUBMIT\" wordt geklikt, zal domoticz over 5 seconden herstarten.<br>\nWil je dit niet, klik dan op \"CANCEL\".<br>",
        "output": "str",
        "x": 440,
        "y": 1940,
        "wires": [
            [
                "79c362d4385c63cc"
            ]
        ]
    },
    {
        "id": "f75a40360f63cf8f",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "topic2payload",
        "func": "msg.topic = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1940,
        "wires": [
            [
                "f389a3e148f1774f"
            ]
        ]
    },
    {
        "id": "747b48f4aef4973c",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Livarno CCT out",
        "mode": "link",
        "links": [
            "21e0778d66ee3309",
            "918a0ae8b7ce5294",
            "97b137d1b50a1111"
        ],
        "x": 2715,
        "y": 940,
        "wires": []
    },
    {
        "id": "918a0ae8b7ce5294",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Livarno CCT in",
        "links": [
            "747b48f4aef4973c"
        ],
        "x": 3035,
        "y": 940,
        "wires": [
            [
                "67ce6624df93cc6b"
            ]
        ]
    },
    {
        "id": "67ce6624df93cc6b",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl Livarno CCT Bulb",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 940,
        "wires": []
    },
    {
        "id": "2d918b02e531dbea",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl Door/Window sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 1020,
        "wires": []
    },
    {
        "id": "adc88992cb43371c",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Door Sensor out",
        "mode": "link",
        "links": [
            "047e48fd30775b86",
            "ab1f478b73c08bc7"
        ],
        "x": 2715,
        "y": 1020,
        "wires": []
    },
    {
        "id": "047e48fd30775b86",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Door sensor in",
        "links": [
            "adc88992cb43371c"
        ],
        "x": 3035,
        "y": 1020,
        "wires": [
            [
                "2d918b02e531dbea"
            ]
        ]
    },
    {
        "id": "2bb442990afd7f4b",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi door sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 1520,
        "wires": []
    },
    {
        "id": "96aea1c7b46fbad0",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi motion sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 1600,
        "wires": []
    },
    {
        "id": "985b0ca87d617e04",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi smoke detector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5b5017c20dbced26",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi doorsensor out",
        "mode": "link",
        "links": [
            "ed6ff6452049bf86",
            "ab1f478b73c08bc7"
        ],
        "x": 2715,
        "y": 1520,
        "wires": []
    },
    {
        "id": "ed6ff6452049bf86",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi doorsensor in",
        "links": [
            "5b5017c20dbced26"
        ],
        "x": 3035,
        "y": 1520,
        "wires": [
            [
                "2bb442990afd7f4b"
            ]
        ]
    },
    {
        "id": "a6bd480b80119757",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi motion sensor out",
        "mode": "link",
        "links": [
            "368f8584a40aa44b",
            "b44b0868eed7faa8"
        ],
        "x": 2715,
        "y": 1600,
        "wires": []
    },
    {
        "id": "368f8584a40aa44b",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi motion sensor in",
        "links": [
            "a6bd480b80119757"
        ],
        "x": 3035,
        "y": 1600,
        "wires": [
            [
                "96aea1c7b46fbad0"
            ]
        ]
    },
    {
        "id": "961ee8cedf25de1b",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi smoke detector in",
        "links": [
            "6cc8ca977d371564"
        ],
        "x": 3035,
        "y": 1640,
        "wires": [
            [
                "985b0ca87d617e04"
            ]
        ]
    },
    {
        "id": "6cc8ca977d371564",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi smoke detector out",
        "mode": "link",
        "links": [
            "961ee8cedf25de1b",
            "a4ba7dd1095cec68"
        ],
        "x": 2715,
        "y": 1640,
        "wires": []
    },
    {
        "id": "bf39bd4af198b709",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi WSDCGQ11LM tempsensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1720,
        "wires": []
    },
    {
        "id": "3445d52d11b356b5",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi WSDCGQ11LM in",
        "links": [
            "f17ee1b1deaf2f61"
        ],
        "x": 3035,
        "y": 1720,
        "wires": [
            [
                "bf39bd4af198b709"
            ]
        ]
    },
    {
        "id": "f17ee1b1deaf2f61",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi WSDCGQ11LM out",
        "mode": "link",
        "links": [
            "3445d52d11b356b5",
            "f1beec20c9c89685"
        ],
        "x": 2715,
        "y": 1720,
        "wires": []
    },
    {
        "id": "694f436c49668d06",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D,  Xiaomi GZCGQ01LM lux-sensor out",
        "mode": "link",
        "links": [
            "9d2bdad4a4da7a13",
            "b598e9736ebb53ed"
        ],
        "x": 2715,
        "y": 1560,
        "wires": []
    },
    {
        "id": "9d2bdad4a4da7a13",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi GZCGQ01LM lux-sensor in",
        "links": [
            "694f436c49668d06"
        ],
        "x": 3035,
        "y": 1560,
        "wires": [
            [
                "c41af3f3e0c7fb79"
            ]
        ]
    },
    {
        "id": "c41af3f3e0c7fb79",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": " Xiaomi GZCGQ01LM lux-sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 1560,
        "wires": []
    },
    {
        "id": "b5aa822b5d816cac",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi WSDCGQ01LM tempsensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 1680,
        "wires": []
    },
    {
        "id": "f599e225b044dafd",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi WSDCGQ11LM in",
        "links": [
            "f1facb7cd579e6b4"
        ],
        "x": 3035,
        "y": 1680,
        "wires": [
            [
                "b5aa822b5d816cac"
            ]
        ]
    },
    {
        "id": "f1facb7cd579e6b4",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi WSDCGQ01LM out",
        "mode": "link",
        "links": [
            "f1beec20c9c89685",
            "f599e225b044dafd"
        ],
        "x": 2715,
        "y": 1680,
        "wires": []
    },
    {
        "id": "b6d4388cc75af6b0",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi Watersensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 1760,
        "wires": []
    },
    {
        "id": "19f7985325e266c1",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi Watersensor in",
        "links": [
            "a82f9fadb61abcb2"
        ],
        "x": 3035,
        "y": 1760,
        "wires": [
            [
                "b6d4388cc75af6b0"
            ]
        ]
    },
    {
        "id": "a82f9fadb61abcb2",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi SJCGQ11LM out",
        "mode": "link",
        "links": [
            "19f7985325e266c1",
            "752d7fe6b164e397"
        ],
        "x": 2715,
        "y": 1760,
        "wires": []
    },
    {
        "id": "f75b5a74fb3c5605",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi Devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Door (MCCGQ12LM)\") {\n        return [msg, null, null, null, null, null, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Door (MCCGQ14LM)\") {\n        return [null, msg, null, null, null, null, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Lux (GZCGQ01LM)\") {\n        return [null, null, msg, null, null, null, null, null, null, null, null]; \n    } else if (msg.payload.ZbInfo.type === \"Motion (RTCGQ01LM)\") {\n        return [null, null, null, msg, null, null, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Motion (RTCGQ12LM)\") {\n        return [null, null, null, null, msg, null, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Smoke (JTYJ-GD-01LM/BW)\") {\n        return [null, null, null, null, null, msg, null, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Temp (WSDCGQ01LM)\") {\n        return [null, null, null, null, null, null, msg, null, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Temp (WSDCGQ11LM)\") {\n        return [null, null, null, null, null, null, null, msg, null, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Temp (WSDCGQ12LM)\") {\n        return [null, null, null, null, null, null, null, null, msg, null, null];\n    } else if (msg.payload.ZbInfo.type === \"Water (SJCGQ11LM)\") {\n        return [null, null, null, null, null, null, null, null, null, msg, null];\n    } else if (msg.payload.ZbInfo.type === \"Cube (MFKZQ01LM)\") {\n        return [null, null, null, null, null, null, null, null, null, null, msg];\n    }\n}\n\nif (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Door (MCCGQ12LM)\") {\n        return [msg, null, null, null, null, null, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Door (MCCGQ14LM)\") {\n        return [null, msg, null, null, null, null, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Lux (GZCGQ01LM)\") {\n        return [null, null, msg, null, null, null, null, null, null, null, null];    \n    } else if (msg.payload.ZbReceived.type === \"Motion (RTCGQ01LM)\") {\n        return [null, null, null, msg, null, null, null, null, null, null, null];    \n    } else if (msg.payload.ZbReceived.type === \"Motion (RTCGQ12LM)\") {\n        return [null, null, null, null, msg, null, null, null, null, null, null];  \n    } else if (msg.payload.ZbReceived.type === \"Smoke (JTYJ-GD-01LM/BW)\") {\n        return [null, null, null, null, null, msg, null, null, null, null, null];\n    } else if (msg.payload.ZbReceived.type === \"Temp (WSDCGQ01LM)\") {\n        return [null, null, null, null, null, null, msg, null, null, null, null];    \n    } else if (msg.payload.ZbReceived.type === \"Temp (WSDCGQ11LM)\") {\n        return [null, null, null, null, null, null, null, msg, null, null, null];    \n    } else if (msg.payload.ZbReceived.type === \"Temp (WSDCGQ12LM)\") {\n        return [null, null, null, null, null, null, null, null, msg, null, null]    \n    } else if (msg.payload.ZbReceived.type === \"Water (SJCGQ11LM)\") {\n        return [null, null, null, null, null, null, null, null, null, msg, null]    \n    } else if (msg.payload.ZbReceived.type === \"Cube (MFKZQ01LM)\") {\n        return [null, null, null, null, null, null, null, null, null, null, msg]    \n    }\n}",
        "outputs": 11,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 1640,
        "wires": [
            [
                "5b5017c20dbced26"
            ],
            [
                "5b5017c20dbced26"
            ],
            [
                "694f436c49668d06"
            ],
            [
                "a6bd480b80119757"
            ],
            [
                "a6bd480b80119757"
            ],
            [
                "6cc8ca977d371564"
            ],
            [
                "f1facb7cd579e6b4"
            ],
            [
                "f17ee1b1deaf2f61"
            ],
            [
                "f17ee1b1deaf2f61"
            ],
            [
                "a82f9fadb61abcb2"
            ],
            [
                "303abee8859d7178"
            ]
        ]
    },
    {
        "id": "99d836ea3d41d0b0",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, MQTT bericht naar dashboard",
        "links": [
            "53d254d1f82445d1",
            "b0030a937edbf451",
            "ffa478373fcb54a7"
        ],
        "x": 915,
        "y": 520,
        "wires": [
            [
                "3feda3ce02f13235"
            ]
        ]
    },
    {
        "id": "b0030a937edbf451",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, MQTT bericht naar dashboard",
        "mode": "link",
        "links": [
            "99d836ea3d41d0b0"
        ],
        "x": 2165,
        "y": 700,
        "wires": []
    },
    {
        "id": "ffa478373fcb54a7",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, MQTT out Tasmota",
        "mode": "link",
        "links": [
            "99d836ea3d41d0b0"
        ],
        "x": 2025,
        "y": 520,
        "wires": []
    },
    {
        "id": "59f2a3d215b5bc48",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "str",
        "x": 1130,
        "y": 580,
        "wires": [
            [
                "0f57331d27535740",
                "dd0b5d53218330f9",
                "f11e15b656f50a6f"
            ]
        ]
    },
    {
        "id": "dd0b5d53218330f9",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "Set debug switch off",
        "func": "msg.payload = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 520,
        "wires": [
            [
                "b611d99b7e6422cf",
                "9cf444d5f9099684"
            ]
        ]
    },
    {
        "id": "b611d99b7e6422cf",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, debug off",
        "mode": "link",
        "links": [
            "b95e6898c6204ca7",
            "c040241aeba92939"
        ],
        "x": 1545,
        "y": 580,
        "wires": []
    },
    {
        "id": "c040241aeba92939",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, debug off",
        "links": [
            "b611d99b7e6422cf"
        ],
        "x": 1575,
        "y": 700,
        "wires": [
            [
                "aa3ef4125ec03d7e"
            ]
        ]
    },
    {
        "id": "c6466c3e86fd187c",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi smart cube",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 1800,
        "wires": []
    },
    {
        "id": "da7de401c93fb6d9",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi Smart Cube out",
        "mode": "link",
        "links": [
            "289cb822f5a1ad74",
            "2b842f86e3188add"
        ],
        "x": 2965,
        "y": 1800,
        "wires": []
    },
    {
        "id": "289cb822f5a1ad74",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "SZ2D, Xiaomi Smart Cube in",
        "links": [
            "da7de401c93fb6d9"
        ],
        "x": 3035,
        "y": 1800,
        "wires": [
            [
                "c6466c3e86fd187c"
            ]
        ]
    },
    {
        "id": "7272d964025bfec8",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Motion Sensor out",
        "mode": "link",
        "links": [
            "095c1403794ff39b",
            "b44b0868eed7faa8"
        ],
        "x": 2715,
        "y": 1060,
        "wires": []
    },
    {
        "id": "095c1403794ff39b",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl Motion sensor in",
        "links": [
            "7272d964025bfec8"
        ],
        "x": 3035,
        "y": 1060,
        "wires": [
            [
                "5090c3e7b94da71e"
            ]
        ]
    },
    {
        "id": "5090c3e7b94da71e",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl beweging sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 1060,
        "wires": []
    },
    {
        "id": "325e02357c787a0b",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "SZ2D, Tasmota message zigbee devices",
        "links": [
            "dabd198d46369e02"
        ],
        "x": 375,
        "y": 2860,
        "wires": [
            [
                "63ef986b5d216961"
            ]
        ]
    },
    {
        "id": "30fe9f8ea7de2fb7",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "SZ2D, Tasmota message to bridge",
        "links": [
            "dabd198d46369e02"
        ],
        "x": 215,
        "y": 3360,
        "wires": [
            [
                "57661677b89a1e7b"
            ]
        ]
    },
    {
        "id": "f11e15b656f50a6f",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "Debug topic2payload",
        "func": "msg.payload = msg.topic\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 640,
        "wires": [
            [
                "8cdc4c76393256a4"
            ]
        ]
    },
    {
        "id": "017597617d7bc00b",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "Tuya 4 button switch TS0044",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 1900,
        "wires": []
    },
    {
        "id": "717d587a990e3462",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "SZ2D, Tuya 4 button switch in",
        "links": [
            "0b16f7168ac62a5a"
        ],
        "x": 3035,
        "y": 1900,
        "wires": [
            [
                "017597617d7bc00b"
            ]
        ]
    },
    {
        "id": "0b16f7168ac62a5a",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "SZ2D, Tuya 4 button switch out",
        "mode": "link",
        "links": [
            "2b842f86e3188add",
            "717d587a990e3462"
        ],
        "x": 2965,
        "y": 1900,
        "wires": []
    },
    {
        "id": "3feda3ce02f13235",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "Debug switch empty payload",
        "func": "if (msg.payload === true) {\n    msg.topic = \"\"\n    msg.payload = \"\"\n}\nif (msg.payload === false) {\n    msg.payload = \"\"\n    msg.topic = \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "0f57331d27535740",
                "f11e15b656f50a6f"
            ]
        ]
    },
    {
        "id": "f26f0f234dc09e2d",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Hoe device instellen in domoticz",
        "func": "var data3info = context.get(\"data3info\") || 0; //get from context or default to 0\n\nswitch (msg.topic){\n\n    case \"type\":\n        data3info = msg.payload; \n        context.set(\"data3info\", data3info);//store in context for next time \n        return;\n\n    case \"submit\":\n        //Heiman\n        if (data3info === \"Monoxide (HS1CA-M)\" ) {\n            msg.topic = \"Heiman, Monoxide (HS1CA-M)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Schakelaar</p><p>Schakelaar daarna instellen als: smoke detector</p>\"\n        } else if (data3info === \"Smoke (HS1SA)\" ) {   \n            msg.topic = \"Heiman, Smoke (HS1SA)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Schakelaar</p><p>Schakelaar daarna instellen als: smoke detector</p>\"\n\n        //Ikea\n        } else if (data3info === \"Light (ICPSHC24-10EU-IL-1)\" ) {   \n            msg.topic = \"Ikea, Light (ICPSHC24-10EU-IL-1)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: dimmer</p>\"\n        } else if (data3info === \"Motion (E1525)\" ) {   \n            msg.topic = \"Ikea, Motion (E1525)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Motion (E1745)\" ) {   \n            msg.topic = \"Ikea, Motion (E1745)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Plug (E1603)\" ) {\n            msg.topic = \"Ikea, Plug (E1603)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n        } else if (data3info === \"Plug (E1702)\" ) {  \n            msg.topic = \"Ikea, Plug (E1702)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n        } else if (data3info === \"Plug (E1708)\" ) {   \n            msg.topic = \"Ikea, Plug (E1708)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n        } else if (data3info === \"Remote (E1743)\" ) {    \n            msg.topic = \"Ikea, Remote (E1743)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10: On</p><p>Niveau 20: On hold</p><p>Niveau 30: Off hold</p><p>Niveau 40: Hold stop</p>\"\n        \n        //Lidl\n        } else if (data3info === \"Plug (HG06620)\" ) {\n            msg.topic = \"Lidl, Plug (HG06620)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n        } else if (data3info === \"Door (HG06336)\" ) {   \n            msg.topic = \"Lidl, Door (HG06336)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: door contact</p>\"\n        } else if (data3info === \"Motion (HG06335)\" ) {   \n            msg.topic = \"Lidl, Motion (HG06335)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Motion (HG07310)\" ) {   \n            msg.topic = \"Lidl, Motion (HG07310)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Light (HG06106A)\" ) {   \n            msg.topic = \"Lidl, Light (HG06106A)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        } else if (data3info === \"Light (HG06106B)\" ) {   \n            msg.topic = \"Lidl, Light (HG06106B)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        } else if (data3info === \"Light (HG06106C)\" ) {   \n            msg.topic = \"Lidl, Light (HG06106C)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        } else if (data3info === \"Light (HG06492A)\" ) {   \n            msg.topic = \"Lidl, Light (HG06492A)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        } else if (data3info === \"Light (HG06492B)\" ) {   \n            msg.topic = \"Lidl, Light (HG06492B)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        } else if (data3info === \"Light (HG06492C)\" ) {   \n            msg.topic = \"Lidl, Light (HG06492C)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n        \n        //Osram       \n        } else if (data3info === \"Remote (AC0251100NJ)\" ) {   \n            msg.topic = \"Osram, Remote (AC0251100NJ)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10: Up</p><p>Niveau 20: Up Hold</p><p>Niveau 30: Up Release</p><p>Niveau 40: Circle Click</p><p>Niveau 50: Circle hold</p><p>Niveau 60: Circle Release</p><p>Niveau 70: Down</p><p>Niveau 80: Down Hold</p><p>Niveau 90: Down Release</p><p>Niveau 100: Standy</p>\"\n        } else if (data3info === \"Remote (AC0251600NJ)\" ) {   \n            msg.topic = \"Osram, Remote (AC0251600NJ)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10: Up</p><p>Niveau 20: Up Hold</p><p>Niveau 30: Up Release</p><p>Niveau 40: Circle Click</p><p>Niveau 50: Circle hold</p><p>Niveau 60: Circle Release</p><p>Niveau 70: Down</p><p>Niveau 80: Down Hold</p><p>Niveau 90: Down Release</p><p>Niveau 100: Standy</p>\"\n        } else if (data3info === \"Remote (AC0251700NJ)\" ) {   \n            msg.topic = \"Osram, Remote (AC0251700NJ)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10: Up</p><p>Niveau 20: Up Hold</p><p>Niveau 30: Up Release</p><p>Niveau 40: Circle Click</p><p>Niveau 50: Circle hold</p><p>Niveau 60: Circle Release</p><p>Niveau 70: Down</p><p>Niveau 80: Down Hold</p><p>Niveau 90: Down Release</p><p>Niveau 100: Standy</p>\"\n\n        //Philips\n        } else if (data3info === \"Light (Lux A19 bulb E27)\") {\n            msg.topic = \"Philips, Light (Lux A19 bulb E27)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: RGBWW switch</p>\"\n                \n        //Sonoff\n        } else if (data3info === \"Remote (SNZB-01)\" ) {   \n            msg.topic = \"Sonoff, Remote (SNZB-01)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10: Single push</p><p>Niveau 20: Double push</p><p>Niveau 30: Hold</p>\"\n        } else if (data3info === \"Plug (S26R2ZB)\") {\n            msg.topic = \"Sonoff, Plug (S26R2ZB)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n        } else if (data3info === \"Motion (SNZB-03)\" ) {   \n            msg.topic = \"Sonoff, Motion (SNZB-03)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Temp (SNZB-02)\") {\n            msg.topic = \"Sonoff, Temp (SNZB-02)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Temp + Hum</p>\"\n\n        //Tuya\n        } else if (data3info === \"Remote (TS0044)\" ) {   \n            msg.topic = \"Tuya, Remote (TS0044)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0: Off</p><p>Niveau 10 = Button 1 single push</p><p>Niveau 20 = Button 1 double push</p><p>Niveau 30 = Button 1 hold</p><p>Niveau 40 = Button 2 single push</p><p>Niveau 50 = Button 2 double push</p><p>Niveau 60 = Button 2 hold</p><p>Niveau 70 = Button 3 single push</p><p>Niveau 80 = Button 3 double push</p><p>Niveau 90 = Button 3 hold</p><p>Niveau 100 = Button 4 single push</p><p>Niveau 110 = Button 4 double push</p><p>Niveau 120 = Button 4 hold</p>\"\n        } else if (data3info === \"Plug (TS011F)\") {\n            msg.topic = \"Tuya, Plug(TS011F)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>IDX nummer = switch</p><p>IDX optie 1 = Voltage</p><p>IDX optie 2 = Vermogen</p><p>IDX optie 3 = Stroom</p><p>IDX optie 4 = Totaal verbruikt</p>\"\n\n\n        //Xiaomi\n        } else if (data3info === \"Cube (MFKZQ01LM)\" ) {   \n            msg.topic = \"Xiaomi, Cube (MFKZQ01LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: keuzeschakelaar</p><p>Keuzeschakelaar daarna instellen als onderstaand;</p><p>Niveau 0 = Wakeup</p><p>Niveau 10 = Shake</p><p>Niveau 20 = Slide</p><p>Niveau 30 = Flip 90</p><p>Niveau 40 = Flip 180</p><p>Niveau 50 = Rotate right</p><p>Niveau 60 = Rotate left</p><p>Niveau 70 = Tap</p><p>Niveau 80 = Fall</p>\"\n        } else if (data3info === \"Door (MCCGQ12LM)\" ) {   \n            msg.topic = \"Xiaomi, Door (MCCGQ12LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: door contact</p>\"\n        } else if (data3info === \"Door (MCCGQ14LM))\" ) {   \n            msg.topic = \"Xiaomi, Door (MCCGQ14LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: door contact</p>\"\n        } else if (data3info === \"Lux (GZCGQ01LM)\" ) {   \n            msg.topic = \"Xiaomi, Lux (GZCGQ01LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Lux</p>\"\n        } else if (data3info === \"Motion (RTCGQ01LM)\" ) {   \n            msg.topic = \"Xiaomi, Motion (RTCGQ01LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Motion (RTCGQ12LM)\" ) {   \n            msg.topic = \"Xiaomi, Motion (RTCGQ12LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: schakelaar</p><p>Schakelaar daarna instellen als: motion sensor</p>\"\n        } else if (data3info === \"Smoke (JTYJ-GD-01LM/BW)\" ) {   \n            msg.topic = \"Xiaomi, Smoke (JTYJ-GD-01LM/BW)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Schakelaar</p><p>Schakelaar daarna instellen als: smoke detector</p>\"\n        } else if (data3info === \"Temp (WSDCGQ01LM)\" ) {   \n            msg.topic = \"Xiaomi, Temp (WSDCGQ01LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Temp + Hum</p>\"\n        } else if (data3info === \"Temp (WSDCGQ11LM)\" ) {   \n            msg.topic = \"Xiaomi, Temp (WSDCGQ11LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Temp + Hum + Baro</p>\"\n        } else if (data3info === \"Temp (WSDCGQ12LM)\" ) {   \n            msg.topic = \"Xiaomi, Temp (WSDCGQ12LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Temp + Hum + Baro</p>\"\n        } else if (data3info === \"Water (SJCGQ11LM)\" ) {   \n            msg.topic = \"Xiaomi, Water (SJCGQ11LM)\"\n            msg.payload = \"<p>Aanmaken in domoticz, dummy type: Schakelaar</p><p>Schakelaar daarna instellen als: contact</p>\"\n\n        } else {\n            msg.topic = \"Device type onbekend\"\n            msg.payload = \"<p>Kies eerst merk en device, alvorens hier informatie kan worden getoond</p>\"\n        }\n        return msg;\n    }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2260,
        "wires": [
            [
                "17806bfa406eea4d"
            ]
        ]
    },
    {
        "id": "fe7da7f05341ea7d",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "Heiman smoke detector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 620,
        "wires": []
    },
    {
        "id": "1e7956c3f9abbb41",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "SZ2D, Heiman Smoke in",
        "links": [
            "a8b0c83b08b5b798"
        ],
        "x": 3035,
        "y": 620,
        "wires": [
            [
                "fe7da7f05341ea7d"
            ]
        ]
    },
    {
        "id": "a8b0c83b08b5b798",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "7ba0c0cba0f8d3cb",
        "name": "SZ2D, Heiman Smoke out",
        "mode": "link",
        "links": [
            "a4ba7dd1095cec68",
            "1e7956c3f9abbb41"
        ],
        "x": 2715,
        "y": 620,
        "wires": []
    },
    {
        "id": "60978b651b1c2bf0",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff SNZB-03 motion",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9c3f41d445d0dc2f",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-03 in",
        "links": [
            "17345b5def7dd23b"
        ],
        "x": 3035,
        "y": 1340,
        "wires": [
            [
                "60978b651b1c2bf0"
            ]
        ]
    },
    {
        "id": "17345b5def7dd23b",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-03 out",
        "mode": "link",
        "links": [
            "9c3f41d445d0dc2f",
            "b44b0868eed7faa8"
        ],
        "x": 2715,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6f2e76b61cacc33d",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "date",
        "x": 150,
        "y": 2780,
        "wires": [
            [
                "41142c143e2198fa"
            ]
        ]
    },
    {
        "id": "d743504d0f6f9807",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "extract devicenames",
        "func": "if (msg.topic === \"no-update\")  {\n   return;\n} else {\n   msg.options = msg.payload.map(obj => {\n      var rObj = {};\n      rObj[obj.label] = obj.bridge+\"/\"+obj.Device+\"/\"+obj.Name+\"/\"\n      return rObj;\n   });\n}\n\nmsg.payload = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 2060,
        "wires": [
            [
                "8b874245fd982544"
            ]
        ]
    },
    {
        "id": "9984884da0ac4ef7",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "Lidl Powerplug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b6977d35b71e17ba",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl powerplug in",
        "links": [
            "22e0a3f2fcfd8827"
        ],
        "x": 3035,
        "y": 1100,
        "wires": [
            [
                "9984884da0ac4ef7"
            ]
        ]
    },
    {
        "id": "22e0a3f2fcfd8827",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47ed67ab93c44d5c",
        "name": "SZ2D, Lidl powerplug out",
        "mode": "link",
        "links": [
            "b6977d35b71e17ba",
            "4a1dc2876fecea47"
        ],
        "x": 2715,
        "y": 1100,
        "wires": []
    },
    {
        "id": "83db7f2646a304d6",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff S26R2ZB plug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3180,
        "y": 1380,
        "wires": []
    },
    {
        "id": "85245932760288b4",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff plug in",
        "links": [
            "6f900f263f675bab"
        ],
        "x": 3035,
        "y": 1380,
        "wires": [
            [
                "83db7f2646a304d6"
            ]
        ]
    },
    {
        "id": "6f900f263f675bab",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff plug out",
        "mode": "link",
        "links": [
            "85245932760288b4",
            "4a1dc2876fecea47"
        ],
        "x": 2715,
        "y": 1380,
        "wires": []
    },
    {
        "id": "693c955e6cf5cdbb",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff SNZB-02 tempsensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 1420,
        "wires": []
    },
    {
        "id": "17e5a8ab902f410e",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-02 in",
        "links": [
            "16a24ac5537ce50d"
        ],
        "x": 3035,
        "y": 1420,
        "wires": [
            [
                "693c955e6cf5cdbb"
            ]
        ]
    },
    {
        "id": "16a24ac5537ce50d",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "SZ2D, Sonoff SNZB-02 out",
        "mode": "link",
        "links": [
            "17e5a8ab902f410e",
            "f1beec20c9c89685"
        ],
        "x": 2715,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5453042ca5706d12",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 2820,
        "wires": [
            [
                "197c850df2b84406"
            ]
        ]
    },
    {
        "id": "43db1c431a848b25",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 800,
        "wires": [
            [
                "dabd198d46369e02"
            ]
        ]
    },
    {
        "id": "cc4fd07b8e8a372e",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "Filter data",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "ZbReceived",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "ZbInfo",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 460,
        "y": 980,
        "wires": [
            [
                "b3c2857a43c0891b"
            ],
            [
                "230600b41223b130"
            ],
            []
        ]
    },
    {
        "id": "d5abfd0be53b33cc",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "add src",
        "func": "msg.src = 'domoticz';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1180,
        "wires": [
            [
                "596888160b07e1dd"
            ]
        ]
    },
    {
        "id": "230600b41223b130",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "add src",
        "func": "msg.src = 'tasmotainfo';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 980,
        "wires": [
            [
                "596888160b07e1dd"
            ]
        ]
    },
    {
        "id": "b3c2857a43c0891b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "add src",
        "func": "msg.src = 'tasmota';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 940,
        "wires": [
            [
                "596888160b07e1dd"
            ]
        ]
    },
    {
        "id": "5edf13b6687c4f17",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "Filter Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "LWT",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 860,
        "wires": [
            [],
            [
                "43db1c431a848b25"
            ]
        ]
    },
    {
        "id": "d4f9d1c1e87e5089",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, topic = Domoticz/out",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "domoticz/out",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 1180,
        "wires": [
            [
                "d5abfd0be53b33cc",
                "f7a7be7a0e123437"
            ]
        ]
    },
    {
        "id": "525709bd12edf5dc",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, MQTT topic Domoticz/out",
        "links": [
            "5153ee6eaec2719e"
        ],
        "x": 75,
        "y": 1180,
        "wires": [
            [
                "d4f9d1c1e87e5089"
            ]
        ]
    },
    {
        "id": "011f62d30ad9ddba",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, topic = tele/#",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "tele/",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 980,
        "wires": [
            [
                "2f5d44534bd6cda0",
                "cc4fd07b8e8a372e",
                "5edf13b6687c4f17"
            ]
        ]
    },
    {
        "id": "5df122ece07b47d8",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, MQTT topic tele/#",
        "links": [
            "5153ee6eaec2719e"
        ],
        "x": 75,
        "y": 980,
        "wires": [
            [
                "011f62d30ad9ddba",
                "632111c5925aad7b",
                "e38af4b60dbf5aa0",
                "61f1a36afaa86fa9"
            ]
        ]
    },
    {
        "id": "632111c5925aad7b",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, topic = contains INFO2",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "INFO2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 800,
        "wires": [
            [
                "43db1c431a848b25"
            ]
        ]
    },
    {
        "id": "e38af4b60dbf5aa0",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, topic = contains STATUS5",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "STATUS5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 840,
        "wires": [
            [
                "43db1c431a848b25"
            ]
        ]
    },
    {
        "id": "61f1a36afaa86fa9",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, topic = contains STATUS2",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "STATUS2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 880,
        "wires": [
            [
                "43db1c431a848b25"
            ]
        ]
    },
    {
        "id": "21a18ea2e1ad8272",
        "type": "mqtt in",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "Messages from MQTT-server",
        "topic": "#",
        "qos": "2",
        "datatype": "auto",
        "broker": "b1bc1db1ae7424c0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 320,
        "y": 660,
        "wires": [
            [
                "5153ee6eaec2719e"
            ]
        ]
    },
    {
        "id": "5153ee6eaec2719e",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "SZ2D, Central MQTT-IN",
        "mode": "link",
        "links": [
            "525709bd12edf5dc",
            "5df122ece07b47d8"
        ],
        "x": 665,
        "y": 600,
        "wires": []
    },
    {
        "id": "8b6a96f5a2389572",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "SZ2D, MQTT-IN",
        "links": [
            "815c5ae767ffd619",
            "e878958d48cdf1a3"
        ],
        "x": 195,
        "y": 600,
        "wires": [
            [
                "1f4be466c6c042be"
            ]
        ]
    },
    {
        "id": "2b842f86e3188add",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "SZ2D, Messages to MQTT-server",
        "links": [
            "bcfca4459487c695",
            "022bf35bafb55495",
            "da7de401c93fb6d9",
            "9d23bc19593e54ce",
            "c32e30cbaf14dacf",
            "05a036d6fb48e97c",
            "a6ae547e6e0edc2c",
            "a055120ed19f9044",
            "e5338bba2c619bba",
            "0b16f7168ac62a5a",
            "e2b0da749269d59a",
            "1ee36b4fc499eabe",
            "e1ff2de83f9489a5",
            "e9716480c1c3ad78"
        ],
        "x": 75,
        "y": 600,
        "wires": [
            [
                "64b2b2f490422add",
                "165c02712f3be090"
            ]
        ]
    },
    {
        "id": "64b2b2f490422add",
        "type": "mqtt out",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "Messages to MQTT-server",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b1bc1db1ae7424c0",
        "x": 260,
        "y": 540,
        "wires": []
    },
    {
        "id": "165c02712f3be090",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "SZ2D, Central MQTT-OUT",
        "mode": "link",
        "links": [
            "a0024720d71c4146",
            "3fea292a07dd0b6e"
        ],
        "x": 145,
        "y": 600,
        "wires": []
    },
    {
        "id": "dabd198d46369e02",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, Tasmota in message",
        "mode": "link",
        "links": [
            "325e02357c787a0b",
            "b62211e0bf840a63",
            "30fe9f8ea7de2fb7"
        ],
        "x": 705,
        "y": 800,
        "wires": []
    },
    {
        "id": "53d254d1f82445d1",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, MQTT to dashboard",
        "mode": "link",
        "links": [
            "99d836ea3d41d0b0"
        ],
        "x": 705,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b95e6898c6204ca7",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "SZ2D, debug off",
        "links": [
            "b611d99b7e6422cf"
        ],
        "x": 75,
        "y": 1080,
        "wires": [
            [
                "47b4fe84c65433b7",
                "b6cbfe1490c47327"
            ]
        ]
    },
    {
        "id": "6f29aba2255523db",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 600,
        "wires": [
            [
                "5153ee6eaec2719e"
            ]
        ]
    },
    {
        "id": "3675b231c34ac408",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "show json errors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 560,
        "wires": []
    },
    {
        "id": "1f4be466c6c042be",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "87c145960b084571",
        "name": "filter json error",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Online",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Ok",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Offline",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 360,
        "y": 600,
        "wires": [
            [
                "3675b231c34ac408"
            ],
            [
                "3675b231c34ac408"
            ],
            [
                "3675b231c34ac408"
            ],
            [
                "6f29aba2255523db"
            ]
        ]
    },
    {
        "id": "f6bb43b8dea1c052",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX nummer",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idx",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2060,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "062f1f55585b2819",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX optie 1",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idxoptie1",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2100,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "2944f3356aaf0eb2",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX optie 2",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 12,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idxoptie2",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2140,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "6d333231e93d9f20",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX optie 4",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 8,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idxoptie4",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2220,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "084a7f42825dc139",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX optie 3",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idxoptie3",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2180,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "312c0d8f079837a5",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "label": "Command",
        "tooltip": "",
        "group": "bc177b9d12958d78",
        "order": 7,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "command",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 810,
        "y": 3300,
        "wires": [
            [
                "12ababc6baf3c5d3"
            ]
        ]
    },
    {
        "id": "e710f439523d7004",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "label": "Parameter",
        "tooltip": "",
        "group": "bc177b9d12958d78",
        "order": 9,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "parameter",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 810,
        "y": 3340,
        "wires": [
            [
                "12ababc6baf3c5d3"
            ]
        ]
    },
    {
        "id": "65bf68ffd9acaa1f",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "label": "Nieuwe naam",
        "tooltip": "",
        "group": "bc177b9d12958d78",
        "order": 8,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "newname",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 1000,
        "y": 2800,
        "wires": [
            [
                "967ae676480e32a7"
            ]
        ]
    },
    {
        "id": "ad167f6132876101",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "label": "Port address nodered host",
        "tooltip": "",
        "group": "71f4e9b937321363",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "1000",
        "topic": "portnodered",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 780,
        "y": 1780,
        "wires": [
            [
                "f389a3e148f1774f"
            ]
        ]
    },
    {
        "id": "e963524b44203e38",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "label": "IP address nodered host",
        "tooltip": "",
        "group": "71f4e9b937321363",
        "order": 1,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "ipnodered",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 770,
        "y": 1700,
        "wires": [
            [
                "f389a3e148f1774f"
            ]
        ]
    },
    {
        "id": "3367132be1b787ed",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "label": "Domoticz template location",
        "tooltip": "",
        "group": "71f4e9b937321363",
        "order": 3,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "filelocation",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 780,
        "y": 1860,
        "wires": [
            [
                "f389a3e148f1774f"
            ]
        ]
    },
    {
        "id": "e76b4239d71167aa",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "group": "067a41fe6b8deb07",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Set settings",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "submit",
        "topicType": "str",
        "x": 670,
        "y": 2380,
        "wires": [
            [
                "434d961017963f40",
                "25a9669194c05d7c"
            ]
        ]
    },
    {
        "id": "167d2e355e27fc19",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "group": "bc177b9d12958d78",
        "order": 12,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Verstuur",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "submit",
        "topicType": "str",
        "x": 820,
        "y": 3380,
        "wires": [
            [
                "12ababc6baf3c5d3",
                "ebcfd11d58a87e26"
            ]
        ]
    },
    {
        "id": "fa4a667bac67f2c8",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "group": "bc177b9d12958d78",
        "order": 13,
        "width": 5,
        "height": 1,
        "passthru": false,
        "label": "Help",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "Help function om commands naar bridge te sturen.",
        "topicType": "str",
        "x": 970,
        "y": 3380,
        "wires": [
            [
                "9253d79996759524"
            ]
        ]
    },
    {
        "id": "c06d3a9d200fe542",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "group": "bc177b9d12958d78",
        "order": 10,
        "width": 10,
        "height": 1,
        "passthru": false,
        "label": "Verander naam",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "rename",
        "topicType": "str",
        "x": 1000,
        "y": 2860,
        "wires": [
            [
                "967ae676480e32a7"
            ]
        ]
    },
    {
        "id": "3c58c7178648d26e",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "",
        "group": "bc177b9d12958d78",
        "order": 14,
        "width": 10,
        "height": 1,
        "passthru": false,
        "label": "{{text}}",
        "tooltip": "",
        "color": "white",
        "bgcolor": "{{background}}",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "show",
        "topicType": "str",
        "x": 670,
        "y": 3760,
        "wires": [
            [
                "8914f9646ddd0f68"
            ]
        ]
    },
    {
        "id": "9116e7ae68a769a5",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "group": "71f4e9b937321363",
        "order": 4,
        "width": 30,
        "height": 1,
        "passthru": false,
        "label": "Save custom pagina domoticz",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "OPMERKING!",
        "topicType": "str",
        "x": 210,
        "y": 1940,
        "wires": [
            [
                "dd918635ed9f4fa3"
            ]
        ]
    },
    {
        "id": "07b3e67bf5a5f334",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "group": "067a41fe6b8deb07",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": false,
        "label": "Hoe device instellen in domoticz",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "submit",
        "topicType": "str",
        "x": 1430,
        "y": 2200,
        "wires": [
            [
                "f26f0f234dc09e2d"
            ]
        ]
    },
    {
        "id": "4949e67efbb98f5e",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "label": "PermitJoin",
        "tooltip": "",
        "place": "",
        "group": "bc177b9d12958d78",
        "order": 11,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "oldname",
        "topicType": "str",
        "className": "",
        "x": 1070,
        "y": 3440,
        "wires": [
            [
                "1ae8a6e9245eaf9b"
            ]
        ]
    },
    {
        "id": "d1bcc76c7b3434a0",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "manufactor type",
        "label": "",
        "tooltip": "",
        "place": "Kies merk device",
        "group": "067a41fe6b8deb07",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Heiman",
                "value": "Heiman",
                "type": "str"
            },
            {
                "label": "Ikea",
                "value": "Ikea",
                "type": "str"
            },
            {
                "label": "Lidl",
                "value": "Lidl",
                "type": "str"
            },
            {
                "label": "Osram",
                "value": "Osram",
                "type": "str"
            },
            {
                "label": "Philips",
                "value": "Philips",
                "type": "str"
            },
            {
                "label": "Tuya",
                "value": "Tuya",
                "type": "str"
            },
            {
                "label": "Sonoff",
                "value": "Sonoff",
                "type": "str"
            },
            {
                "label": "Xiaomi",
                "value": "Xiaomi",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "vendor",
        "topicType": "str",
        "className": "",
        "x": 1120,
        "y": 2200,
        "wires": [
            [
                "434d961017963f40",
                "8d13d2bc424f2865",
                "f26f0f234dc09e2d"
            ]
        ]
    },
    {
        "id": "43a0d048ad0eaf62",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "name": "",
        "label": "Bridge",
        "tooltip": "",
        "place": "",
        "group": "bc177b9d12958d78",
        "order": 5,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "bridge",
        "topicType": "str",
        "className": "",
        "x": 650,
        "y": 3300,
        "wires": [
            [
                "12ababc6baf3c5d3"
            ]
        ]
    },
    {
        "id": "fd5a1b860aac7c4e",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "name": "",
        "label": "Apparaat",
        "tooltip": "",
        "place": "",
        "group": "bc177b9d12958d78",
        "order": 6,
        "width": 10,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "oldname",
        "topicType": "str",
        "className": "",
        "x": 1020,
        "y": 2740,
        "wires": [
            [
                "967ae676480e32a7"
            ]
        ]
    },
    {
        "id": "30aab3ba9b8254aa",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "device type",
        "label": "",
        "tooltip": "",
        "place": "Kies type device (eerst merk kiezen!)",
        "group": "067a41fe6b8deb07",
        "order": 11,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "type",
        "topicType": "str",
        "className": "",
        "x": 1110,
        "y": 2320,
        "wires": [
            [
                "434d961017963f40",
                "f26f0f234dc09e2d"
            ]
        ]
    },
    {
        "id": "8b874245fd982544",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "Apparaat",
        "tooltip": "",
        "place": "",
        "group": "067a41fe6b8deb07",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": false,
        "multiple": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "device",
        "topicType": "str",
        "className": "",
        "x": 480,
        "y": 2060,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "aa3ef4125ec03d7e",
        "type": "ui_switch",
        "z": "3c1abf359e6df878",
        "name": "",
        "label": "Debug onbekend mqtt berichten",
        "tooltip": "",
        "group": "c9e8745706090d40",
        "order": 3,
        "width": 7,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1770,
        "y": 700,
        "wires": [
            [
                "a45b91d018b1c4dd",
                "b0030a937edbf451"
            ]
        ]
    },
    {
        "id": "9cf444d5f9099684",
        "type": "ui_switch",
        "z": "3c1abf359e6df878",
        "name": "",
        "label": "Tasmota flow -> MQTT server",
        "tooltip": "",
        "group": "c9e8745706090d40",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 1660,
        "y": 520,
        "wires": [
            [
                "38d81194cb2dc0ab",
                "ffa478373fcb54a7"
            ]
        ]
    },
    {
        "id": "b6cbfe1490c47327",
        "type": "ui_switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "",
        "label": "Inkomend Domoticz bericht",
        "tooltip": "",
        "group": "c9e8745706090d40",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "f7a7be7a0e123437",
                "53d254d1f82445d1"
            ]
        ]
    },
    {
        "id": "47b4fe84c65433b7",
        "type": "ui_switch",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "",
        "label": "Inkomend Tasmota bericht",
        "tooltip": "",
        "group": "c9e8745706090d40",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "control",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "2f5d44534bd6cda0",
                "53d254d1f82445d1"
            ]
        ]
    },
    {
        "id": "4d9787f51b3e7e58",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "group": "31c858b1f905e9ad",
        "order": 1,
        "width": 30,
        "height": 2,
        "name": "Top text info tab",
        "label": "{{msg.topic}}",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "238a7647a4485f63",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "group": "bc177b9d12958d78",
        "order": 1,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "",
        "format": "<font color =\"#0EB8C0\" font size= \"4px\">Tasmota zigbee bridge</font>",
        "layout": "row-left",
        "className": "",
        "x": 430,
        "y": 3400,
        "wires": []
    },
    {
        "id": "5e69acbb1fc54a1f",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "group": "bc177b9d12958d78",
        "order": 2,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "",
        "format": "<font color =\"#0EB8C0\" font size= \"4px\">Stuur bericht naar zigbee bridge</font>",
        "layout": "row-left",
        "className": "",
        "x": 430,
        "y": 3360,
        "wires": []
    },
    {
        "id": "b6c4870f67bd1ee8",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "group": "bc177b9d12958d78",
        "order": 3,
        "width": 10,
        "height": 1,
        "name": "",
        "label": "",
        "format": "<font color =\"#0EB8C0\" font size= \"4px\">Verander naam zigbee apparaat</font>",
        "layout": "row-left",
        "className": "",
        "x": 770,
        "y": 2940,
        "wires": []
    },
    {
        "id": "0f57331d27535740",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "group": "c9e8745706090d40",
        "order": 2,
        "width": 30,
        "height": 2,
        "name": "",
        "label": "Payload:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1340,
        "y": 580,
        "wires": []
    },
    {
        "id": "8cdc4c76393256a4",
        "type": "ui_text",
        "z": "3c1abf359e6df878",
        "group": "c9e8745706090d40",
        "order": 1,
        "width": 30,
        "height": 1,
        "name": "",
        "label": "Topic:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 1570,
        "y": 640,
        "wires": []
    },
    {
        "id": "b33e7564e8249ced",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "e2c31040ddc1fcda",
        "position": "top right",
        "displayTime": "10",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Device Warning!",
        "x": 820,
        "y": 4200,
        "wires": []
    },
    {
        "id": "08606a538ebd86e8",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "topic": "",
        "name": "Tasmota Device Info",
        "x": 1140,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "a0a7ddab3ea31950",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Zigbee Device Info",
        "x": 1290,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "b1838a61f42b98ce",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Zigbee Device Info",
        "x": 1270,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "79c362d4385c63cc",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Cancel",
        "cancel": "Submit",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Herstart domoticz",
        "x": 630,
        "y": 1940,
        "wires": [
            [
                "f75a40360f63cf8f"
            ]
        ]
    },
    {
        "id": "17806bfa406eea4d",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Zigbee Device Info",
        "x": 1370,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "c6506ebeef840f35",
        "type": "ui_template",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "group": "820d633cf842d21f",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<div ng-init=\"init()\" id=\"pin_insert\" class=\"dialog\">\n    \n    <div class=\"dialog_content\">\n        \n        <div class=\"dialog_header\">\n            <h2 style=\"margin:10px\">Release notes</h2>\n        </div>\n        \n        <div class=\"dialog_body\">\n            <div ng-bind-html=\"msg.payload\" style=\"height:400px;width:100%;margin: 4px 2px;overflow:auto;\"></div>\n            <!--<div ng-bind-html=\"msg.payload\"></div>-->\n            <form action=\"/flows.json\" method=\"get\"><input type=\"submit\" class=\"buttons\" value=\"Download\" name=\"Submit\" id=\"frm1_submit\"/></form>\n            <button class=\"buttoncl\" id=\"myCls\" ng-click=\"closeDialog()\">Close</button>\n        </div> \n    </div> \n</div> \n\n<style>\n\n/* The Dialog (background) */\n.dialog {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 9999; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    color : rgb(255,255,255);\n\tbackground-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n    -webkit-transform: translateZ(0px);\n    -webkit-transform: translate3d(0,0,0);\n    -webkit-perspective: 1000;\n}\n\n.dialog_content {\n\tposition: absolute;\n    background-color: rgb(51,51,51);\n    left: 25%;\n    top: 30px;\n    border-radius: 3px;\n    padding: 0;\n    width: 50%;\n    /*height: 70%;*/\n    height: 550px;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animatetop;\n    animation-name: animatetop;\n    animation-duration: 0.4s;\n}\n\n/* Dialog Header */\n.dialog_header {\n    padding: 2px 16px;\n    background-color: rgb(20,117,120);\n    border-radius: 3px 3px 0 0;\n    color: white;\n}\n\n/* Dialog Body */\n.dialog_body {padding: 5px;}\n\n/* The Close Button */\n.close {\n    color: #fff;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n    cursor: pointer;\n}\n\n.close:hover,\n.close:focus {\n    color: #1565C0;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n\n.btn1 {\n  color : rgb(255,255,255);\n  background-color: rgb(20,117,120);\n  border-radius: 3px 3px 3px 3px;\n  font-size: 16px;\n}\n\n/* Button style */\n    .buttoncl {\n        position: absolute;\n        border: none;\n        /*border-radius: 2px;*/\n        padding: 15px 4.4%;\n        font-size: 16px;\n        font-weight:550;\n        font-family:arial;\n        margin: 4px 2px;\n        /*text-transform: uppercase;*/\n        display: inline-block;\n        cursor: pointer;\n        color: white;\n        background-color:  #0A8085;\n        outline: none;\n        left: 85%;\n        top: 88%;\n    } \n    \n    .buttons {\n        position: absolute;\n        background-color: #0A8085;\n        border: none;\n        color: #FFF7E0; \n        padding: 15px 4.4%;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n        font-weight:550;\n        font-family:arial;\n        margin: 4px 2px;\n        cursor: pointer;\n        left: 65%;\n        top: 88%;\n    }\n\n</style>\n\n<script>\nvar dialog;\n\n\n/* ==== */\n(function(scope) {\n    \n    scope.passcode = \"\";\n    \n    scope.init = function() {\n        scope.send({payload : \"init\"});\n\t\tscope.passcode = \"\";\n        //Hide the md-panel\n        $('#pin_insert').parent().parent().css(\"display\", \"none\");\n        //This trick make it works on smartphones too :)\n        dialog = $('#pin_insert').detach();\n        //dialog.appendTo(document.body); // This leaves ghost numpads if pinpad is not opened!\n    }\n    \n    scope.showDialog = function() {\n        dialog.appendTo(document.body); // better to add the body only when the numpad is displayed (seams to be removed automatically)\n        dialog.css(\"display\", \"block\");\n    }\n    \n    scope.closeDialog = function(){\n        dialog.css(\"display\", \"none\");\n\t\tscope.send({payload : scope.passcode});\n    }\n     \n\n    scope.$watch('msg', function(data) {\n        if(data && data.topic){\n            switch(data.topic){\n               case \"show\":\n\t\t\t\t\t\tscope.passcode = \"\";\n                        scope.showDialog();\n                break;\n                case \"close\": \n                    dialog.css(\"display\", \"none\");\n                break;\n            }\n        }\n    });\n})(scope);\n\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1180,
        "y": 3760,
        "wires": [
            []
        ]
    },
    {
        "id": "2a5fa43295007d84",
        "type": "ui_table",
        "z": "3c1abf359e6df878",
        "g": "ccf89df08fcb807a",
        "group": "bc177b9d12958d78",
        "name": "Tasmota bridges",
        "order": 4,
        "width": 10,
        "height": 3,
        "columns": [
            {
                "field": "link",
                "title": "Name",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "STATE.Wifi.RSSI",
                "title": "RSSI",
                "width": "14%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seen",
                "title": "Last",
                "width": "14%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ZbState.Message",
                "title": "Zb Status",
                "width": "45%",
                "align": "right",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "del",
                "title": "Verwijder",
                "width": "25%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 620,
        "y": 3260,
        "wires": [
            [
                "ccd7bcb7f8c89243"
            ]
        ]
    },
    {
        "id": "aa9fa71984e8f14c",
        "type": "ui_table",
        "z": "3c1abf359e6df878",
        "g": "56e6b148885b3805",
        "group": "9d7647bdd05009d8",
        "name": "Zigbee Devices",
        "order": 1,
        "width": 30,
        "height": 11,
        "columns": [
            {
                "field": "label",
                "title": "Naam",
                "width": "15%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Device",
                "title": "Device",
                "width": "8%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "bridge",
                "title": "Bridge",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "LinkQuality",
                "title": "RSSI",
                "width": "6%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "BatteryPercentage",
                "title": "Bat. %",
                "width": "8%",
                "align": "left",
                "formatter": "progress",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "BatteryVoltage",
                "title": "Bat. V",
                "width": "8%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "seen",
                "title": "Last",
                "width": "6%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "status",
                "title": "Status",
                "width": "39%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "del",
                "title": "Delete",
                "width": "7%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 780,
        "y": 2900,
        "wires": [
            [
                "c40798c7801b4717"
            ]
        ]
    },
    {
        "id": "a45b91d018b1c4dd",
        "type": "gate",
        "z": "3c1abf359e6df878",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 2010,
        "y": 700,
        "wires": [
            [
                "b0030a937edbf451"
            ]
        ]
    },
    {
        "id": "38d81194cb2dc0ab",
        "type": "gate",
        "z": "3c1abf359e6df878",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 1900,
        "y": 540,
        "wires": [
            [
                "ffa478373fcb54a7"
            ]
        ]
    },
    {
        "id": "f7a7be7a0e123437",
        "type": "gate",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 530,
        "y": 1120,
        "wires": [
            [
                "53d254d1f82445d1"
            ]
        ]
    },
    {
        "id": "2f5d44534bd6cda0",
        "type": "gate",
        "z": "3c1abf359e6df878",
        "g": "b8fda5c8e21359fa",
        "name": "",
        "controlTopic": "control",
        "defaultState": "closed",
        "openCmd": "true",
        "closeCmd": "false",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "statusCmd": "status",
        "persist": false,
        "storeName": "memory",
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "53d254d1f82445d1"
            ]
        ]
    },
    {
        "id": "b8de8f741884c2ee",
        "type": "flogger",
        "z": "3c1abf359e6df878",
        "d": true,
        "name": "",
        "logfile": "T2Z-flogger-logfile.txt",
        "inputchoice": "fullmsg",
        "inputobject": "payload",
        "inputobjectType": "msg",
        "inputmoustache": "Recieved payload {{payload}} and topic {{topic}}",
        "loglevel": "INFO",
        "logconfig": "298a46833b4247e5",
        "sendpane": "",
        "x": 330,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "497bdccfe154392a",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "Pi file save location",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "/home/pi/domoticz/plugins/tasmota2zigbee",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 400,
        "wires": [
            [
                "a07930a8fd8e086a"
            ]
        ]
    },
    {
        "id": "a07930a8fd8e086a",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "SZ2D, Pi save location",
        "mode": "link",
        "links": [
            "3c6303b4a9a4b2af"
        ],
        "x": 425,
        "y": 400,
        "wires": []
    },
    {
        "id": "86b71b63f614c39f",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "get file location",
        "func": "var location = flow.get(\"savefiledestination\")\nmsg.payload = \"<center>In de gebruikte bridges moet de volgende SetOption als volgt zijn ingesteld!;</center><center>SetOption83 = 0, SetOption89 = 0, SetOption100 = 0, SetOption101 = 0, SetOption112 = 0, SetOption118 = 0, SetOption119 = 0</center><center>Data save folder: \" + location + \"</center>\"\nmsg.topic = \"Actuele versie: <b>V_10-01-2023_R1</b>\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            [
                "85400793a6d74bc8"
            ]
        ]
    },
    {
        "id": "5fbb67e46d36f754",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "Save data locaties",
        "info": "Native system:\n/home/pi/domoticz/plugins/tasmota2zigbee\n\nDocker system:\n/data/saved-files/tasmota2zigbee",
        "x": 110,
        "y": 320,
        "wires": []
    },
    {
        "id": "39c3822d0a5c1f75",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 3900,
        "wires": [
            [
                "f431078916cbc6d0"
            ]
        ]
    },
    {
        "id": "32c65441eb5e96fd",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "V2 Pi, test directory exists",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 3940,
        "wires": [
            [
                "004a2f298cc7f4fe"
            ]
        ]
    },
    {
        "id": "071868fae5f54a46",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "Get save location pi",
        "func": "var destination = msg.payload;\nmsg.filename = destination + \"/testPIdirectory\";\nflow.set(\"savefiledestination\", destination);\nmsg.delay = 5000;\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3940,
        "wires": [
            [
                "32c65441eb5e96fd"
            ],
            [
                "0b0a53e9e3da23e4"
            ]
        ]
    },
    {
        "id": "0b83dd0ca5f4aded",
        "type": "catch",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "scope": [
            "32c65441eb5e96fd",
            "0b0a53e9e3da23e4"
        ],
        "uncaught": false,
        "x": 170,
        "y": 4020,
        "wires": [
            [
                "18952938b648d436"
            ]
        ]
    },
    {
        "id": "7644c100ce6ffe03",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "Get save location docker",
        "func": "var destination = msg.payload;\nmsg.filename = destination + \"/testDOCKERdirectory\";\nflow.set(\"savefiledestination\", destination);\nmsg.delay = 5000;\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 4020,
        "wires": [
            [
                "59778568d02a59d7"
            ],
            [
                "694cc1a696e53715"
            ]
        ]
    },
    {
        "id": "385851c29af725d0",
        "type": "catch",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "scope": [
            "59778568d02a59d7",
            "694cc1a696e53715"
        ],
        "uncaught": false,
        "x": 110,
        "y": 4100,
        "wires": [
            [
                "e7cb21650396d634"
            ]
        ]
    },
    {
        "id": "59778568d02a59d7",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "V2 Docker, test directory exists",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 4020,
        "wires": [
            [
                "004a2f298cc7f4fe"
            ]
        ]
    },
    {
        "id": "71d73ac3c7e30c13",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "Docker file save location",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "/data/saved-files/tasmota2zigbee",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 440,
        "wires": [
            [
                "14fcb836691f492f"
            ]
        ]
    },
    {
        "id": "14fcb836691f492f",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "SZ2D, Docker save location",
        "mode": "link",
        "links": [
            "07999f363fbe8dd1"
        ],
        "x": 425,
        "y": 440,
        "wires": []
    },
    {
        "id": "a4c151fd90dbb568",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "SZ2D, Pi save location",
        "links": [
            "0d55e5b84b1b3f41"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "497bdccfe154392a"
            ]
        ]
    },
    {
        "id": "cbcc4c5a1246a705",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "e627636302ea6792",
        "name": "SZ2D, Docker save location",
        "links": [
            "18952938b648d436"
        ],
        "x": 75,
        "y": 440,
        "wires": [
            [
                "71d73ac3c7e30c13"
            ]
        ]
    },
    {
        "id": "0d55e5b84b1b3f41",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "SZ2D, Start after deploy",
        "mode": "link",
        "links": [
            "a4c151fd90dbb568",
            "8d6f606ef9c2d8f2"
        ],
        "x": 1115,
        "y": 3900,
        "wires": []
    },
    {
        "id": "3c6303b4a9a4b2af",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "SZ2D, Pi data save location",
        "links": [
            "a07930a8fd8e086a"
        ],
        "x": 335,
        "y": 3940,
        "wires": [
            [
                "071868fae5f54a46"
            ]
        ]
    },
    {
        "id": "18952938b648d436",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "SZ2D, Get docker save location",
        "mode": "link",
        "links": [
            "cbcc4c5a1246a705"
        ],
        "x": 265,
        "y": 4020,
        "wires": []
    },
    {
        "id": "07999f363fbe8dd1",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "SZ2D, Docker data save location",
        "links": [
            "14fcb836691f492f"
        ],
        "x": 335,
        "y": 4020,
        "wires": [
            [
                "7644c100ce6ffe03",
                "1918adce4580e414"
            ]
        ]
    },
    {
        "id": "e7cb21650396d634",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "Error find directory",
        "func": "var error = \"ERROR, directory PI and DOCKER not found\"\nflow.set(\"savefiledestination\", error);\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 4100,
        "wires": [
            [
                "1918adce4580e414"
            ]
        ]
    },
    {
        "id": "52c0b76f27e1d1aa",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "SZ2D, start UI",
        "mode": "link",
        "links": [
            "638d2b223ae9f7ab",
            "54fbbc498fee47ec",
            "24b8247762331bc4",
            "49e7f8b48d2981ed"
        ],
        "x": 1175,
        "y": 4100,
        "wires": []
    },
    {
        "id": "004a2f298cc7f4fe",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "pauseType": "delayv",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 4100,
        "wires": [
            [
                "52c0b76f27e1d1aa"
            ]
        ]
    },
    {
        "id": "1918adce4580e414",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "reset delay",
        "func": "delete msg.delay;\ndelete msg.error;\nmsg.reset = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 4100,
        "wires": [
            [
                "004a2f298cc7f4fe"
            ]
        ]
    },
    {
        "id": "54fbbc498fee47ec",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, start UI text bar",
        "links": [
            "52c0b76f27e1d1aa"
        ],
        "x": 35,
        "y": 80,
        "wires": [
            [
                "86b71b63f614c39f"
            ]
        ]
    },
    {
        "id": "39d3acac07428eca",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "start after deploy",
        "func": "var location = \"please wait, loading config\"\nmsg.payload = \"(In de gebruikte bridges moet <b> SetOption83</b> op <b>0</b> staan!) <br> Data save folder: \" + location\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 120,
        "wires": [
            [
                "85400793a6d74bc8"
            ]
        ]
    },
    {
        "id": "85400793a6d74bc8",
        "type": "change",
        "z": "3c1abf359e6df878",
        "name": "SCRIPT VERSION",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Actuele versie: V2_28-03-2023_R1_beta",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "4d9787f51b3e7e58"
            ]
        ]
    },
    {
        "id": "8d6f606ef9c2d8f2",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, startup",
        "links": [
            "0d55e5b84b1b3f41"
        ],
        "x": 35,
        "y": 120,
        "wires": [
            [
                "39d3acac07428eca"
            ]
        ]
    },
    {
        "id": "d8fc7deb0b2e7cff",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Get save location",
        "func": "var destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/zigbeeidxtabel.txt\";\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2040,
        "wires": [
            [
                "d7f390a0f8117a1e"
            ],
            [
                "cb8ec32d6eb317f9"
            ]
        ]
    },
    {
        "id": "cb8ec32d6eb317f9",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1530,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "4fd1fcde19dcda86",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "169675e56bdde684",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1420,
        "y": 1840,
        "wires": [
            []
        ]
    },
    {
        "id": "f431078916cbc6d0",
        "type": "http request",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://127.0.0.1:1880/settings",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 3900,
        "wires": [
            [
                "0c97f9a91d714d41"
            ]
        ]
    },
    {
        "id": "0c97f9a91d714d41",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 3900,
        "wires": [
            [
                "2c4e087f61e2f251"
            ]
        ]
    },
    {
        "id": "2c4e087f61e2f251",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "Get version",
        "func": "flow.set(\"NoderedVersion\",msg.payload.version);\nmsg.payload = new(Date);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 3900,
        "wires": [
            [
                "0d55e5b84b1b3f41"
            ]
        ]
    },
    {
        "id": "9028641e3cd5d6e3",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 2580,
        "wires": [
            [
                "6eea92a8ec156905"
            ]
        ]
    },
    {
        "id": "81a507f5f81cbaaf",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Debug flow.get",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 2620,
        "wires": []
    },
    {
        "id": "35423dfa967f1cf6",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Set flow.get test",
        "func": "var store =  msg.payload;\nflow.set(\"t2ztable\", store);\nreturn [{payload:Object.values(store)}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 2580,
        "wires": [
            [
                "5847a9f030315d2f"
            ]
        ]
    },
    {
        "id": "6eea92a8ec156905",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Payload2Object",
        "func": "//var test = flow.get(\"t2ztest\") || {};\nvar store = msg.payload;\nmsg2 = Object.assign({}, store);\nreturn [{payload:(msg2)}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2580,
        "wires": [
            [
                "a40ad40a012544c0"
            ]
        ]
    },
    {
        "id": "a40ad40a012544c0",
        "type": "split",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 850,
        "y": 2580,
        "wires": [
            [
                "7f851b7b8f8f34a8"
            ]
        ]
    },
    {
        "id": "7f851b7b8f8f34a8",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "zigbeeID2Topic",
        "func": "var value = msg.payload.zigbeeid\nmsg.topic = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2580,
        "wires": [
            [
                "a8fb71bf971d986c"
            ]
        ]
    },
    {
        "id": "a8fb71bf971d986c",
        "type": "join",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1150,
        "y": 2580,
        "wires": [
            [
                "81a507f5f81cbaaf",
                "35423dfa967f1cf6",
                "7d2092fa4e91fc3b"
            ]
        ]
    },
    {
        "id": "5847a9f030315d2f",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "SZ2D, Restore idx table (read file)",
        "mode": "link",
        "links": [
            "7a1da07ae34fdbec"
        ],
        "x": 1435,
        "y": 2580,
        "wires": []
    },
    {
        "id": "7d2092fa4e91fc3b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Store fake ikea ID",
        "func": "var devsdomoticz = flow.get(\"t2ztable\") || {};\nvar length = Object.keys(devsdomoticz).length;\n\nfor ( var i = 0; i < length; i++ ) {\n    var keys = Object.keys(devsdomoticz);\n    var IDkey = keys[i];\n    var message = devsdomoticz[IDkey];\n    var messagetype = devsdomoticz[IDkey].type;\n    var messageidx = parseInt(devsdomoticz[IDkey].idx);\n    var messagezigbeeid = devsdomoticz[IDkey].zigbeeid;\n    var messagebridge = devsdomoticz[IDkey].bridge;\n    var array = [];\n    \n    if ( messagetype === \"Remote (E1743)\" || messagetype === \"Plug (E1603)\" || messagetype === \"Plug (E1702)\" || messagetype === \"Plug (E1708)\") {\n        array[0] = messageidx;\n        array[1] = messagebridge;\n        flow.set(messagezigbeeid, array);\n        msg.payload = \"Flow.set for device id \" + messagezigbeeid + \", idx: \" + messageidx + \", bridge: \" + messagebridge + \"\";\n        node.send(msg);\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "7707f8fb4b5a2caa",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "SZ2D, Check E1743 after setting settings",
        "links": [
            "7aa47fa379fb1e6f"
        ],
        "x": 1175,
        "y": 2540,
        "wires": [
            [
                "7d2092fa4e91fc3b"
            ]
        ]
    },
    {
        "id": "f8740aaed87bd41d",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Get save location",
        "func": "delete msg.payload;\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/zigbeeidxtabel.txt\";\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 2580,
        "wires": [
            [
                "d722c5e177767eda"
            ],
            [
                "0e0839e6243f9757"
            ]
        ]
    },
    {
        "id": "638d2b223ae9f7ab",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "SZ2D, start UI",
        "links": [
            "52c0b76f27e1d1aa"
        ],
        "x": 75,
        "y": 2580,
        "wires": [
            [
                "f8740aaed87bd41d",
                "d822d082a2b75851"
            ]
        ]
    },
    {
        "id": "d722c5e177767eda",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Read pi",
        "filename": "",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 2560,
        "wires": [
            [
                "9028641e3cd5d6e3"
            ]
        ]
    },
    {
        "id": "0e0839e6243f9757",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Read docker",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 2600,
        "wires": [
            [
                "9028641e3cd5d6e3"
            ]
        ]
    },
    {
        "id": "0b0a53e9e3da23e4",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "V3 Pi, test directory exists",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 830,
        "y": 3980,
        "wires": [
            [
                "004a2f298cc7f4fe"
            ]
        ]
    },
    {
        "id": "694cc1a696e53715",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "6df92418db148270",
        "name": "V3 Docker, test directory exists",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 810,
        "y": 4060,
        "wires": [
            [
                "004a2f298cc7f4fe"
            ]
        ]
    },
    {
        "id": "ee14456093c642ae",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Get saved telegram info",
        "func": "delete msg.payload;\nvar bot = flow.get(\"bot\");\nvar chatid = flow.get(\"chatid\");\nvar setbot;\nvar setchatid\n\nif (bot === undefined) {\n    setbot = { payload: 'Not defined' };\n} else {\n    setbot = { payload: bot};\n}\n\nif (chatid === undefined) {\n    setchatid = { payload: 'Not defined' };\n} else {\n    setchatid = { payload: chatid };\n}\n\nreturn [setbot, setchatid];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 3600,
        "wires": [
            [
                "63f0dd7b943e2d88"
            ],
            [
                "cbf354f448d7609e"
            ]
        ]
    },
    {
        "id": "21850dcc45e2382d",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "SZ2D, set telegram after deploy",
        "links": [
            "2d5dcb4304a0901a"
        ],
        "x": 75,
        "y": 3600,
        "wires": [
            [
                "ee14456093c642ae"
            ]
        ]
    },
    {
        "id": "63f0dd7b943e2d88",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "",
        "label": "Telegram BOT credentials",
        "tooltip": "",
        "group": "5c318ed91e2e00b3",
        "order": 1,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "bot",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 510,
        "y": 3560,
        "wires": [
            [
                "8df879b0f01694f6"
            ]
        ]
    },
    {
        "id": "cbf354f448d7609e",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "",
        "label": "Telegram Chat ID credentials",
        "tooltip": "",
        "group": "5c318ed91e2e00b3",
        "order": 2,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "chatid",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 520,
        "y": 3600,
        "wires": [
            [
                "8df879b0f01694f6"
            ]
        ]
    },
    {
        "id": "8df879b0f01694f6",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Set Device settings",
        "func": "var data1 = context.get(\"data1\") || null; //get from context or default to 0\nvar data2 = context.get(\"data2\") || 0; //get from context or default to 0\n\n//var reconfig = flow.get(\"t2ztable\") || {};\n\nswitch (msg.topic){\n\n    case \"bot\":\n        data1 = msg.payload; \n        context.set(\"data1\", data1);//store in context for next time \n        return;\n    \n    case \"chatid\":\n        data2 = msg.payload; \n        context.set(\"data2\", data2);//store in context for next time \n        return;\n            \n    case \"submit\":\n        if (data1 !== null ) {\n            if (data2 !== null) {\n                flow.set(\"bot\", data1);\n                flow.set(\"chatid\", data2);\n                var datasend1 = { payload: data1 };\n                var datasend2 = { payload: data2 };\n                context.set(\"data1\", null)\n                context.set(\"data2\", null)\n                return [datasend1, datasend2];\n            } else {\n                return;\n            }\n        } else {\n            return;\n        }\n    }",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 3600,
        "wires": [
            [
                "3be3c709f83c4a7c"
            ],
            [
                "8cd52e02a5b87194"
            ]
        ]
    },
    {
        "id": "05c29c01d7a525f2",
        "type": "ui_button",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "",
        "group": "5c318ed91e2e00b3",
        "order": 4,
        "width": 30,
        "height": 1,
        "passthru": false,
        "label": "Save telegram settings",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "submit",
        "topicType": "str",
        "x": 540,
        "y": 3640,
        "wires": [
            [
                "8df879b0f01694f6"
            ]
        ]
    },
    {
        "id": "3be3c709f83c4a7c",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Get save location",
        "func": "var destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-bot-credentials.txt\";\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 3580,
        "wires": [
            [
                "efd8529718fb9924"
            ],
            [
                "7856886803b859f9"
            ]
        ]
    },
    {
        "id": "efd8529718fb9924",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1230,
        "y": 3540,
        "wires": [
            []
        ]
    },
    {
        "id": "7856886803b859f9",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1230,
        "y": 3580,
        "wires": [
            []
        ]
    },
    {
        "id": "8cd52e02a5b87194",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Get save location",
        "func": "var destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-chatid-credentials.txt\";\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 3620,
        "wires": [
            [
                "7c7f93cf867fdd2c"
            ],
            [
                "956b8bc8609a7849"
            ]
        ]
    },
    {
        "id": "7c7f93cf867fdd2c",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1230,
        "y": 3620,
        "wires": [
            []
        ]
    },
    {
        "id": "956b8bc8609a7849",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "f9c91086607bc42e",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1230,
        "y": 3660,
        "wires": [
            []
        ]
    },
    {
        "id": "2d5dcb4304a0901a",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "SZ2D, Restore telegram (read file)",
        "mode": "link",
        "links": [
            "21850dcc45e2382d",
            "0eadbde0bc90c9c8"
        ],
        "x": 1365,
        "y": 3100,
        "wires": []
    },
    {
        "id": "f897010fb19eecc9",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Get save location",
        "func": "delete msg.payload;\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-bot-credentials.txt\";\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 3060,
        "wires": [
            [
                "3962c8aa5f389acc"
            ],
            [
                "cf994b3878b086ab"
            ]
        ]
    },
    {
        "id": "24b8247762331bc4",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "SZ2D, start UI",
        "links": [
            "52c0b76f27e1d1aa"
        ],
        "x": 75,
        "y": 3100,
        "wires": [
            [
                "f897010fb19eecc9",
                "4ee5d0c3b24afb48"
            ]
        ]
    },
    {
        "id": "3962c8aa5f389acc",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Read pi",
        "filename": "",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 3040,
        "wires": [
            [
                "8059f74a1505fd2d"
            ]
        ]
    },
    {
        "id": "cf994b3878b086ab",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Read docker",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 3080,
        "wires": [
            [
                "8059f74a1505fd2d"
            ]
        ]
    },
    {
        "id": "4ee5d0c3b24afb48",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Get save location",
        "func": "delete msg.payload;\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-chatid-credentials.txt\";\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 3140,
        "wires": [
            [
                "9a04b22efb979b25"
            ],
            [
                "6aba90f378f86134"
            ]
        ]
    },
    {
        "id": "9a04b22efb979b25",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Read pi",
        "filename": "",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 3120,
        "wires": [
            [
                "2ddd3e5049ca712a"
            ]
        ]
    },
    {
        "id": "6aba90f378f86134",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Read docker",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 3160,
        "wires": [
            [
                "2ddd3e5049ca712a"
            ]
        ]
    },
    {
        "id": "2ddd3e5049ca712a",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Set Device settings",
        "func": "flow.set(\"chatid\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3140,
        "wires": [
            [
                "d0bde3c507cbec9f"
            ]
        ]
    },
    {
        "id": "8059f74a1505fd2d",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "Set Device settings",
        "func": "flow.set(\"bot\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3060,
        "wires": [
            [
                "11baf83766458e57"
            ]
        ]
    },
    {
        "id": "d0bde3c507cbec9f",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "parts.index = 1",
        "rules": [
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 3140,
        "wires": [
            [
                "65b7fc994ed8a9d5"
            ]
        ]
    },
    {
        "id": "1aa46d9667bcf55b",
        "type": "join",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1230,
        "y": 3100,
        "wires": [
            [
                "2d5dcb4304a0901a"
            ]
        ]
    },
    {
        "id": "11baf83766458e57",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "parts.index = 0",
        "rules": [
            {
                "t": "set",
                "p": "parts.index",
                "pt": "msg",
                "to": "0",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 3060,
        "wires": [
            [
                "65b7fc994ed8a9d5"
            ]
        ]
    },
    {
        "id": "65b7fc994ed8a9d5",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "1b078b4e3cb34041",
        "name": "group id and count",
        "rules": [
            {
                "t": "set",
                "p": "parts.id",
                "pt": "msg",
                "to": "mygroup",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "parts.count",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 3100,
        "wires": [
            [
                "1aa46d9667bcf55b"
            ]
        ]
    },
    {
        "id": "722964375447a11c",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Check Zigbee lastseen and Battery",
        "func": "delete msg.payload;\nvar devs = flow.get(\"t2zdevices\") || {};\nvar devs2 = flow.get(\"t2ztable\") || {};\nvar bot = flow.get(\"bot\") || {};\nvar chatid = flow.get(\"chatid\") || {};\n\nfor (var devN in devs) {\n\n    let devInfo = devs[devN];\n    let devInfo2 = devs2[devN]; \n    \n    let offlineinfo = devInfo2.offline; \n    \n    if ((bot !== {}) && (chatid !== {})) {\n        if (devInfo2.hasOwnProperty(\"lowbat\")) {\n            let store = devInfo2.lowbat;\n            let number = store.split(\" \");\n            let setting = Number(number[0]);\n            if (devInfo.hasOwnProperty(\"BatteryPercentage\")) {\n                let realtime = devInfo.BatteryPercentage;\n                if ((devInfo2.lowbat !== \"Geen monitoring\") || (devInfo2.lowvoltage !== \"Niet ingesteld\")) {\n                    if (setting > realtime) {\n                        let telegram = 'https://api.telegram.org/bot' + bot + '/sendMessage?chat_id=' + chatid + '&text=';\n                        msg.payload = '' + telegram + 'Zigbee-device: ' + devInfo.Name + ' (' + devInfo.Device + '), geeft batterij low-voltage melding. (Percentage: ' + realtime + ' %.)';\n                        node.send(msg);\n                    }\n                }\n            }\n        }\n\n        if (devInfo2.hasOwnProperty(\"offline\")) {\n            if (offlineinfo === \"Ja\") { \n                if (parseInt(devInfo.seen) > 720) {\n                    let telegram = 'https://api.telegram.org/bot' + bot + '/sendMessage?chat_id=' + chatid + '&text=';\n                    msg.payload = '' + telegram + 'Zigbee-device: ' + devInfo.Name + ' (' + devInfo.Device + '), is offline: ' + devInfo.seen + 'inuten.';\n                    node.send(msg);\n                }\n            }\n        }\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1280,
        "wires": [
            [
                "144028cd07e14cc0"
            ]
        ]
    },
    {
        "id": "144028cd07e14cc0",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1930,
        "y": 1280,
        "wires": [
            [
                "ba374ef64705c27c"
            ]
        ]
    },
    {
        "id": "ba374ef64705c27c",
        "type": "http request",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 2090,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "c1a9327434e772d9",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea E1743 remote",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3170,
        "y": 800,
        "wires": []
    },
    {
        "id": "77821154c471b317",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea ICPSHC24 led strip",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 720,
        "wires": []
    },
    {
        "id": "23593717f7fe9bcb",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea E1743 in",
        "links": [
            "c32e30cbaf14dacf"
        ],
        "x": 3035,
        "y": 800,
        "wires": [
            [
                "c1a9327434e772d9"
            ]
        ]
    },
    {
        "id": "c32e30cbaf14dacf",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea E1743 out",
        "mode": "link",
        "links": [
            "2b842f86e3188add",
            "23593717f7fe9bcb"
        ],
        "x": 2965,
        "y": 800,
        "wires": []
    },
    {
        "id": "56101de5381ca56f",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea ICPSHC24 in",
        "links": [
            "7c015677814352ca"
        ],
        "x": 3035,
        "y": 720,
        "wires": [
            [
                "77821154c471b317"
            ]
        ]
    },
    {
        "id": "7c015677814352ca",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea ICPSHC24 out",
        "mode": "link",
        "links": [
            "21e0778d66ee3309",
            "56101de5381ca56f",
            "97b137d1b50a1111"
        ],
        "x": 2715,
        "y": 720,
        "wires": []
    },
    {
        "id": "8ab850f412826e0f",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea powerplug out",
        "mode": "link",
        "links": [
            "0e90369a7bd0020b",
            "4a1dc2876fecea47"
        ],
        "x": 2715,
        "y": 760,
        "wires": []
    },
    {
        "id": "0e90369a7bd0020b",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea powerplug in",
        "links": [
            "8ab850f412826e0f"
        ],
        "x": 3035,
        "y": 760,
        "wires": [
            [
                "ac05d7de1daf1c67"
            ]
        ]
    },
    {
        "id": "ac05d7de1daf1c67",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea powerplug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3160,
        "y": 760,
        "wires": []
    },
    {
        "id": "90fad3910c548d2d",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "1,8sec",
        "pauseType": "delay",
        "timeout": "1800",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2830,
        "y": 840,
        "wires": [
            [
                "c32e30cbaf14dacf"
            ]
        ]
    },
    {
        "id": "a2c90bdd9a686312",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Light (ICPSHC24-10EU-IL-1)\") {\n        return [msg, null, null, null, null, null, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Plug (E1603)\") {\n        return [null, msg, null, null, null, null, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Plug (E1702)\") {\n        return [null, null, msg, null, null, null, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Plug (E1708)\") {\n        return [null, null, null, msg, null, null, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Remote (E1743)\") {\n        return [null, null, null, null, msg, null, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Motion (E1525)\") {\n        return [null, null, null, null, null, msg, null]\n    }\n    else if (msg.payload.ZbInfo.type === \"Motion (E1745)\") {\n        return [null, null, null, null, null, null, msg]\n    }\n}\n\nif (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Light (ICPSHC24-10EU-IL-1)\") {\n        return [msg, null, null, null, null, null, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Plug (E1603)\") {\n        return [null, msg, null, null, null, null, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Plug (E1702)\") {\n        return [null, null, msg, null, null, null, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Plug (E1708)\") {\n        return [null, null, null, msg, null, null, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Remote (E1743)\") {\n        return [null, null, null, null, msg, null, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Motion (E1525)\") {\n        return [null, null, null, null, null, msg, null]\n    }\n    else if (msg.payload.ZbReceived.type === \"Motion (E1745)\") {\n        return [null, null, null, null, null, null, msg]\n    }\n}\n\nif ( msg.src === 'domoticz' ) {\n    if (msg.payload.type === \"Light (ICPSHC24-10EU-IL-1)\") {\n        return [msg, null, null, null, null, null, null]\n    }\n    else if (msg.payload.type === \"Plug (E1603)\") {\n        return [null, msg, null, null, null, null, null]\n    }\n    else if (msg.payload.type === \"Plug (E1702)\") {\n        return [null, null, msg, null, null, null, null]\n    }\n    else if (msg.payload.type === \"Plug (E1708)\") {\n        return [null, null, null, msg, null, null, null]\n    }\n    else if (msg.payload.type === \"Remote (E1743)\") {\n        return [null, null, null, null, msg, null, null]\n    }\n    else if (msg.payload.type === \"Motion (E1525)\") {\n        return [null, null, null, null, null, msg, null]\n    }\n    else if (msg.payload.type === \"Motion (E1745)\") {\n        return [null, null, null, null, null, null, msg]\n    }\n}",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 800,
        "wires": [
            [
                "7c015677814352ca"
            ],
            [
                "8ab850f412826e0f"
            ],
            [
                "8ab850f412826e0f"
            ],
            [
                "8ab850f412826e0f"
            ],
            [
                "2e499290ea8e9d20"
            ],
            [
                "fb7bbf24b18c4851"
            ],
            [
                "fb7bbf24b18c4851"
            ]
        ]
    },
    {
        "id": "34afe7cbdf432008",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea motion in",
        "links": [
            "fb7bbf24b18c4851"
        ],
        "x": 3035,
        "y": 840,
        "wires": [
            [
                "5a804b927b966214"
            ]
        ]
    },
    {
        "id": "fb7bbf24b18c4851",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "SZ2D, Ikea motion out",
        "mode": "link",
        "links": [
            "34afe7cbdf432008",
            "b44b0868eed7faa8"
        ],
        "x": 2715,
        "y": 840,
        "wires": []
    },
    {
        "id": "5a804b927b966214",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea motion",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3150,
        "y": 840,
        "wires": []
    },
    {
        "id": "31a5813a01e2c9ad",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "label": "Op welk tijdstip zigbee batterijen controleren: ",
        "tooltip": "",
        "group": "5c318ed91e2e00b3",
        "order": 3,
        "width": 10,
        "height": 1,
        "passthru": true,
        "mode": "time",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 870,
        "y": 1300,
        "wires": [
            [
                "e59aeb6c6da687f0",
                "abb67ac8725e4c02"
            ]
        ]
    },
    {
        "id": "68e597a35b167ed3",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 1280,
        "wires": [
            [
                "4cf0d157f69399af"
            ]
        ]
    },
    {
        "id": "e59aeb6c6da687f0",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "[ms] to [hh:mm]",
        "func": "//var time = (new Date(msg.payload )).toUTCString().match(/(\\d\\d:\\d\\d:\\d\\d)/)[0];\nvar time = (new Date(msg.payload)).toUTCString().match(/(\\d\\d:\\d\\d)/)[0];\n\nvar array = time.split(\":\");\nvar pointNum = parseFloat(array[1]);\nif (pointNum < 9) {\n    var minut = pointNum + 1;\n    var timeMaOFF = array[0] + ':0' + minut;\n    var msgobj = { payload: '{\"ontime\":\"' + time + '\",\"offtime\":\"' + timeMaOFF + '\"}' };\n} else {\n    var minut = pointNum + 1;\n    var timeMaOFF = array[0] + ':' + minut;\n    var msgobj = { payload: '{\"ontime\":\"' + time + '\",\"offtime\":\"' + timeMaOFF + '\"}' };\n}\n\nreturn [msgobj]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1280,
        "wires": [
            [
                "68e597a35b167ed3"
            ]
        ]
    },
    {
        "id": "4cf0d157f69399af",
        "type": "schedex",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Check battery",
        "passthroughunhandled": false,
        "suspended": false,
        "lat": "51.102642",
        "lon": "5.888785",
        "ontime": "",
        "ontopic": "domoticz/in",
        "onpayload": "{\"command\": \"switchlight\", \"idx\": 58, \"switchcmd\": \"On\"}",
        "onoffset": 0,
        "onrandomoffset": 0,
        "offtime": "",
        "offtopic": "",
        "offpayload": "",
        "offoffset": "",
        "offrandomoffset": 0,
        "mon": true,
        "tue": true,
        "wed": true,
        "thu": true,
        "fri": true,
        "sat": true,
        "sun": true,
        "x": 1460,
        "y": 1280,
        "wires": [
            [
                "722964375447a11c"
            ]
        ]
    },
    {
        "id": "abb67ac8725e4c02",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Get save location",
        "func": "var destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-check-battery.txt\";\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "0b895bad584b8ede"
            ],
            [
                "e6495878d9955d69"
            ]
        ]
    },
    {
        "id": "0b895bad584b8ede",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1450,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "e6495878d9955d69",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1450,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "6be18c5ff0c8b177",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Get save location",
        "func": "delete msg.payload;\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/telegram-check-battery.txt\";\n\nvar version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1320,
        "wires": [
            [
                "10d0a5d36c401e81"
            ],
            [
                "138f3ea397843793"
            ]
        ]
    },
    {
        "id": "10d0a5d36c401e81",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Read pi",
        "filename": "",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 380,
        "y": 1300,
        "wires": [
            [
                "2b2e3a4c8540bc5c"
            ]
        ]
    },
    {
        "id": "138f3ea397843793",
        "type": "file in",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "Read docker",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 1340,
        "wires": [
            [
                "2b2e3a4c8540bc5c"
            ]
        ]
    },
    {
        "id": "2b2e3a4c8540bc5c",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "set string time to nr",
        "func": "msg.payload = Number(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "31a5813a01e2c9ad"
            ]
        ]
    },
    {
        "id": "49e7f8b48d2981ed",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "SZ2D, start UI",
        "links": [
            "52c0b76f27e1d1aa"
        ],
        "x": 75,
        "y": 1320,
        "wires": [
            [
                "6be18c5ff0c8b177"
            ]
        ]
    },
    {
        "id": "0867179dfb6230ed",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1640,
        "y": 1380,
        "wires": [
            [
                "722964375447a11c"
            ]
        ]
    },
    {
        "id": "a4674d3a9d68f8dc",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, update release in",
        "links": [
            "bdda1b2043d5bcb1"
        ],
        "x": 375,
        "y": 160,
        "wires": [
            [
                "2fc07e99c1eb06bd"
            ]
        ]
    },
    {
        "id": "e048f22b47261431",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "name": "SZ2D, update release out",
        "mode": "link",
        "links": [
            "1ce1a03f8933cdea"
        ],
        "x": 665,
        "y": 160,
        "wires": []
    },
    {
        "id": "2fc07e99c1eb06bd",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "UPDATE RELEASE",
        "func": "var version = \"V2_28-03-2023_R1_beta\"\nvar oldStr = msg.payload;\nvar newStr = oldStr.slice(0, oldStr.length-1);\nvar store = newStr;\nflow.set(\"version\", newStr);\nvar html = \"\";\nmsg.topic = \"Release notes\";\nif (msg.statusCode === 200 || 201) {\n    if (store === version) {\n        msg.text = \"FLOW IS UP TO DATE MET GITHUB (\" + version + \")\"\n        msg.background = \"#0A8085\";\n        return msg;\n    } else {\n        msg.text = \"ER IS EEN UPDATE, DOWNLOAD FLOW FILE VAN GITHUB\"\n        msg.background = \"#8C101C\";\n        return msg;\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "e048f22b47261431"
            ]
        ]
    },
    {
        "id": "bdda1b2043d5bcb1",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "SZ2D, update release in",
        "mode": "link",
        "links": [
            "a4674d3a9d68f8dc"
        ],
        "x": 435,
        "y": 3760,
        "wires": []
    },
    {
        "id": "1ce1a03f8933cdea",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "47441918f76973cc",
        "name": "SZ2D, update release out",
        "links": [
            "e048f22b47261431"
        ],
        "x": 555,
        "y": 3760,
        "wires": [
            [
                "3c58c7178648d26e"
            ]
        ]
    },
    {
        "id": "047ec4ae74055c95",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Offline notificatie",
        "label": "",
        "tooltip": "",
        "place": "Offline notificatie",
        "group": "067a41fe6b8deb07",
        "order": 9,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Ja",
                "value": "Ja",
                "type": "str"
            },
            {
                "label": "Nee",
                "value": "Nee",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "offline",
        "topicType": "str",
        "className": "",
        "x": 680,
        "y": 2340,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "8db776c57086a242",
        "type": "ui_dropdown",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "Percentage threshold",
        "label": "Low batt. percentage",
        "tooltip": "",
        "place": "",
        "group": "067a41fe6b8deb07",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Geen monitoring",
                "value": "Geen monitoring",
                "type": "str"
            },
            {
                "label": "5 %",
                "value": "5 %",
                "type": "str"
            },
            {
                "label": "6 %",
                "value": "6 %",
                "type": "str"
            },
            {
                "label": "7 %",
                "value": "7 %",
                "type": "str"
            },
            {
                "label": "8 %",
                "value": "8 %",
                "type": "str"
            },
            {
                "label": "9 %",
                "value": "9 %",
                "type": "str"
            },
            {
                "label": "10 %",
                "value": "10 %",
                "type": "str"
            },
            {
                "label": "11 %",
                "value": "11 %",
                "type": "str"
            },
            {
                "label": "12 %",
                "value": "12 %",
                "type": "str"
            },
            {
                "label": "13 %",
                "value": "13 %",
                "type": "str"
            },
            {
                "label": "14 %",
                "value": "14 %",
                "type": "str"
            },
            {
                "label": "15 %",
                "value": "15 %",
                "type": "str"
            },
            {
                "label": "16 %",
                "value": "16 %",
                "type": "str"
            },
            {
                "label": "17 %",
                "value": "17 %",
                "type": "str"
            },
            {
                "label": "18 %",
                "value": "18 %",
                "type": "str"
            },
            {
                "label": "19 %",
                "value": "19 %",
                "type": "str"
            },
            {
                "label": "20 %",
                "value": "20 %",
                "type": "str"
            },
            {
                "label": "21 %",
                "value": "21 %",
                "type": "str"
            },
            {
                "label": "22 %",
                "value": "22 %",
                "type": "str"
            },
            {
                "label": "23 %",
                "value": "23 %",
                "type": "str"
            },
            {
                "label": "24 %",
                "value": "24 %",
                "type": "str"
            },
            {
                "label": "25 %",
                "value": "25 %",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "lowbat",
        "topicType": "str",
        "className": "",
        "x": 700,
        "y": 2300,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "aaecdcfdf9cf3823",
        "type": "ui_table",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "group": "067a41fe6b8deb07",
        "name": "Zigbee tabel",
        "order": 15,
        "width": 30,
        "height": 10,
        "columns": [
            {
                "field": "name",
                "title": "Naam",
                "width": "11%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "vendors",
                "title": "Merk",
                "width": "5%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "type",
                "title": "Type apparaat",
                "width": "13%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "zigbeeid",
                "title": "Device",
                "width": "5%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "bridge",
                "title": "Bridge",
                "width": "9%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idx",
                "title": "idx switch",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idxoptie1",
                "title": "idx optie 1",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idxoptie2",
                "title": "idx optie 2",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idxoptie3",
                "title": "idx optie 3",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idxoptie4",
                "title": "idx optie 4",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "idxoptie5",
                "title": "idx optie 5",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "lowbat",
                "title": "Low batt.",
                "width": "7%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "offline",
                "title": "Offline notificatie",
                "width": "8%",
                "align": "center",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "del",
                "title": "Delete",
                "width": "10%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 650,
        "y": 1480,
        "wires": [
            [
                "a4613fae4c6af158"
            ]
        ]
    },
    {
        "id": "917edbd60f8a6a98",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Close",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Zigbee Device Info",
        "x": 1550,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "9b5a6ae6a1a17500",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "rewrite backup file",
        "func": "var reconfig = flow.get(\"t2ztable\") || {};\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/zigbeeidxtabel.txt\";\nreturn [{payload:Object.values(reconfig)},msg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1600,
        "wires": [
            [
                "db76dbdffa4c771c"
            ]
        ]
    },
    {
        "id": "db76dbdffa4c771c",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1490,
        "y": 1600,
        "wires": [
            [
                "dbcd0e5f4e5f6777"
            ]
        ]
    },
    {
        "id": "7cf8d097a03d869e",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "SZ2D, Restore in (zigbee tabel)",
        "mode": "link",
        "links": [
            "7f05c13d02221381",
            "7a1da07ae34fdbec"
        ],
        "x": 1675,
        "y": 1500,
        "wires": []
    },
    {
        "id": "6c0b13f331a8d5ac",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Voorbereiden voor device tabel",
        "func": "var devs; \n\nif ( msg.src === 'restore' ) {\n    devs = flow.get(\"t2ztable\") || {};\n    return [{payload:Object.values(devs)}];\n} else if (msg.payload.ZbReceived === undefined) {\n    return;\n} else {\n\n    devs = flow.get(\"t2ztable\") || {};\n    var receivedSensors = [];\n\n    for (var devN in msg.payload.ZbReceived) {\n        let devInfo = msg.payload.ZbReceived[devN];\n        let ID = devInfo.Device;\n        let Name = devInfo.Name;\n        \n\n        if (Name===undefined) {\n            var retract = Object.keys(msg.payload.ZbReceived);\n            Name = retract[0];\n        }\n     \n        // get dev by ID\n        let dev = devs[ID] || {};\n\n        if (dev.vendors === undefined) {\n            dev.vendors = \"onbekend\";\n        }\n        if (dev.type === undefined) {\n            dev.type = \"onbekend\";\n        }\n        if (dev.idx === undefined) {\n            dev.idx = \"Niet ingesteld\";\n        }\n        if (dev.idxoptie1 === undefined) {\n            dev.idxoptie1 = \"Niet ingesteld\";\n        }\n        if (dev.idxoptie2 === undefined) {\n            dev.idxoptie2 = \"Niet ingesteld\";\n        }\n        if (dev.idxoptie3 === undefined) {\n            dev.idxoptie3 = \"Niet ingesteld\";\n        }\n        if (dev.idxoptie4 === undefined) {\n            dev.idxoptie4 = \"Niet ingesteld\";\n        }\n        if (dev.idxoptie5 === undefined) {\n            dev.idxoptie5 = \"Niet ingesteld\";\n        }\n        if (dev.lowbat === undefined) {\n            dev.lowbat = \"Niet ingesteld\";\n        } else {\n            dev.lowbat = dev.lowbat;\n        }\n        if (dev.offline === undefined) {\n            dev.offline = \"Niet ingesteld\";\n        }\n        //dev.label = ID; \n        dev.zigbeeid = ID;\n        dev.bridge = msg.topic.split(\"/\")[1];\n        dev.name = Name;\n    \n        // write back\n        devs[ID] = dev;\n        receivedSensors.push(dev);\n    }\n    flow.set(\"t2ztable\", devs);\n}\nreturn [{payload:Object.values(devs)}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1480,
        "wires": [
            [
                "aaecdcfdf9cf3823"
            ]
        ]
    },
    {
        "id": "a5888a10dcb3b23b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "add src",
        "func": "msg.src = 'restore';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1480,
        "wires": [
            [
                "6c0b13f331a8d5ac"
            ]
        ]
    },
    {
        "id": "b62211e0bf840a63",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "SZ2D, Tasmota message idx tabel",
        "links": [
            "dabd198d46369e02"
        ],
        "x": 215,
        "y": 1540,
        "wires": [
            [
                "6c0b13f331a8d5ac"
            ]
        ]
    },
    {
        "id": "7a1da07ae34fdbec",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "SZ2D, restore idxtable out",
        "links": [
            "5847a9f030315d2f",
            "7aa47fa379fb1e6f",
            "7cf8d097a03d869e"
        ],
        "x": 75,
        "y": 1480,
        "wires": [
            [
                "a5888a10dcb3b23b"
            ]
        ]
    },
    {
        "id": "6066fabd07bffd11",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Del in zigbee tabel",
        "func": "    var devs = flow.get(\"t2ztable\") || {};\n    var flowdeltype = msg.payload.type;\n    var flowdelid = msg.payload.zigbeeid;\n    delete devs[msg.payload.zigbeeid];\n    var dev = flow.get(\"t2zdevices\") || {};\n    delete dev[msg.payload.zigbeeid];\n    if (flowdeltype === \"Remote (E1743)\" || flowdeltype === \"Plug (E1603)\" || flowdeltype === \"Plug (E1702)\" || flowdeltype === \"Plug (E1708)\") {\n        flow.set(flowdelid, undefined);\n    }\n    var leavemsg;\n    var forgetmsg;\n    msg.topic = \"IDX tabel: \" + msg.payload.name + \", \" + msg.payload.zigbeeid + \" is verwijdert.\";\n    if ((msg.payload.zbleave === \"ja\") && (msg.payload.zbforget === \"ja\")) {\n       leavemsg = { \"topic\": \"cmnd/\"+msg.payload.bridge+\"/ZbLeave\",\"payload\":msg.payload.zigbeeid}; \n       forgetmsg = { \"topic\": \"cmnd/\"+msg.payload.bridge+\"/ZbForget\",\"payload\":msg.payload.zigbeeid}; \n       msg.payload = \"Unpair command is verstuurt naar device en device is verwijdert in de sonoff bridge.\"\n    } else if ((msg.payload.zbleave === \"ja\") && (msg.payload.zbforget === \"nee\")) {    \n       leavemsg = { \"topic\": \"cmnd/\"+msg.payload.bridge+\"/ZbLeave\",\"payload\":msg.payload.zigbeeid}; \n       forgetmsg = null; \n       msg.payload = \"Unpair command is verstuurt naar device, device is niet verwijdert in de sonoff bridge.\" \n    } else if ((msg.payload.zbleave === \"nee\") && (msg.payload.zbforget === \"ja\")) {    \n       leavemsg = null; \n       forgetmsg = { \"topic\": \"cmnd/\"+msg.payload.bridge+\"/ZbForget\",\"payload\":msg.payload.zigbeeid}; \n       msg.payload = \"Unpair command is niet verstuurt naar device, device is verwijdert in de sonoff bridge.\" \n     } else if ((msg.payload.zbleave === \"nee\") && (msg.payload.zbforget === \"nee\")) {    \n       leavemsg = null; \n       forgetmsg = null; \n       msg.payload = \"Unpair command is niet verstuurt naar device. device is niet verwijdert in de sonoff bridge. Device is alleen verwijdert in de tabel.\" \n\n    }\n \n    var reconfig = flow.get(\"t2ztable\") || {}\n    flow.set(\"delbuffer\", \"\");\n    return [msg,{payload:Object.values(reconfig)},leavemsg, forgetmsg];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1540,
        "wires": [
            [
                "917edbd60f8a6a98",
                "7cf8d097a03d869e"
            ],
            [
                "9b5a6ae6a1a17500"
            ],
            [
                "022bf35bafb55495"
            ],
            [
                "0675b7440d474898"
            ]
        ]
    },
    {
        "id": "e15624da3381d18d",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Annuleren",
        "cancel": "Verwijderen",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Del asking pop-up",
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "a68bdd792cce06d3"
            ]
        ]
    },
    {
        "id": "a4613fae4c6af158",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Prefix for asking del?",
        "func": "if (msg.topic === \"del\") {\n    flow.set(\"delbuffer\", msg.payload)\n    \n    msg.topic = \"IDX tabel: \" + msg.payload.name + \", \" + msg.payload.zigbeeid + \" verwijderen?\";\n    msg.payload = \"Wil je dit device verwijderen uit de IDX tabel?\"\nreturn [msg, null];    \n}\n\n\nmsg.topic = msg.payload.name + \" (\" + msg.payload.zigbeeid + \")\";\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1540,
        "wires": [
            [
                "e15624da3381d18d"
            ],
            [
                "175d8a0f8392a4fb"
            ]
        ]
    },
    {
        "id": "175d8a0f8392a4fb",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Sluiten",
        "cancel": "",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Show detail info",
        "x": 660,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "22bc165f15374f0d",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "position": "prompt",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": " Nee",
        "cancel": "Ja",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Asking del incl. ZbLeave",
        "x": 930,
        "y": 1520,
        "wires": [
            [
                "2c3b13516944f833"
            ]
        ]
    },
    {
        "id": "a68bdd792cce06d3",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Ask Incl. ZbLeave",
        "func": "if (msg.payload === \"Verwijderen\") {\n    msg.payload = flow.get(\"delbuffer\")\n    msg.topic = \"IDX tabel: \" + msg.payload.name + \", \" + msg.payload.zigbeeid + \" verwijderen, incl. ZbLeave?\";\n    msg.payload = 'Device verwijderen inclusief command: ZbLeave? <br><br> ZbLeave betekent: Dat het device un-paired wordt met de bridge. <br> Let op met batterij devices, als deze in slaapmode staan, ontvangen deze het command niet.'\n    return msg;    \n}\n\nif (msg.payload === \"Annuleren\") {\n    flow.set(\"delbuffer\", \"\");\n    return;\n}\n\nmsg.topic = msg.payload.name;\n\nlet str = JSON.stringify(msg.payload, null, 2);\ndelete msg.payload;\nmsg.payload = \"<pre>\" + str + \"</pre>\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1480,
        "wires": [
            [
                "22bc165f15374f0d"
            ]
        ]
    },
    {
        "id": "2c3b13516944f833",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Write ZbLeave + Ask ZbForget",
        "func": "msg.payload = flow.get(\"delbuffer\")\n\nif (msg.payload === \"Ja\") {\n    msg.payload.zbleave = \"ja\";\n    flow.set(\"delbuffer\", msg.payload)\n}\n\nif (msg.payload === \"Nee\") {\n    msg.payload.zbleave = \"nee\";\n    flow.set(\"delbuffer\", msg.payload)\n}\n\nmsg.topic = \"IDX tabel: \" + msg.payload.name + \", \" + msg.payload.zigbeeid + \" verwijderen, incl ZbForget?\";\nmsg.payload = 'Device verwijderen inclusief command: ZbForget? <br><br> ZbForget betekent: Dat het device verwijdert wordt in de bridge. <br> Let op, doe je ZbForget zonder de ZbLeave, dan is de kans aanwezig dat het device automatisch retour komt in de bridge.'\nreturn msg;   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1560,
        "wires": [
            [
                "4bad540cbb6e9d3d"
            ]
        ]
    },
    {
        "id": "4bad540cbb6e9d3d",
        "type": "ui_toast",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Nee",
        "cancel": "Ja",
        "raw": true,
        "className": "",
        "topic": "",
        "name": "Asking del incl. ZbForget",
        "x": 930,
        "y": 1600,
        "wires": [
            [
                "a82c28a2cce522e8"
            ]
        ]
    },
    {
        "id": "a82c28a2cce522e8",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Write ZbForget",
        "func": "if (msg.payload === \"Ja\") {\n    msg.payload = flow.get(\"delbuffer\")\n    msg.payload.zbforget = \"ja\";\n    flow.set(\"delbuffer\", msg.payload)\n}\n\nif (msg.payload === \"Nee\") {\n    msg.payload = flow.get(\"delbuffer\")\n    msg.payload.zbforget = \"nee\";\n    flow.set(\"delbuffer\", msg.payload)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1480,
        "wires": [
            [
                "6066fabd07bffd11"
            ]
        ]
    },
    {
        "id": "0675b7440d474898",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1540,
        "y": 1560,
        "wires": [
            [
                "022bf35bafb55495"
            ]
        ]
    },
    {
        "id": "022bf35bafb55495",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "SZ2D, To mqtt server",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1675,
        "y": 1540,
        "wires": []
    },
    {
        "id": "dbcd0e5f4e5f6777",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Get save location",
        "func": "var version = flow.get(\"NoderedVersion\");\nvar array = version.split(\".\");\nvar destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/zigbeeidxtabel.txt\";\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\nreturn;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 1600,
        "wires": [
            [
                "0b91797038f5c6a3"
            ],
            [
                "d19d8dedaece1a86"
            ]
        ]
    },
    {
        "id": "d19d8dedaece1a86",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1850,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "0b91797038f5c6a3",
        "type": "file",
        "z": "3c1abf359e6df878",
        "g": "04acacbecb0f84cc",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1850,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "829cd14f7ef6f997",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "g": "0f6bc3859b4040f9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "6be18c5ff0c8b177"
            ]
        ]
    },
    {
        "id": "596888160b07e1dd",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Filter Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "RESULT",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "LWT",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "SENSOR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "domoticz/out",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "INFO1",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "INFO2",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "INFO3",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "STATE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "3fea976568dc5293"
            ],
            [
                "2dfbd15d06e1123e"
            ],
            [
                "039e9bf351a7b143"
            ],
            [
                "9239471a71e1357b"
            ],
            [
                "aa874e9d3c0e366a"
            ],
            [
                "1bd2479b863055f2"
            ],
            [
                "6fd48d92a8aceab9"
            ],
            [
                "eb1a54f4e46337ec"
            ],
            [
                "16bb7ab786b49c0b"
            ]
        ]
    },
    {
        "id": "ec5442af7a61b18c",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic State",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3fea976568dc5293",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 860,
        "wires": []
    },
    {
        "id": "16bb7ab786b49c0b",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic not in filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1180,
        "wires": []
    },
    {
        "id": "aa874e9d3c0e366a",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic Info1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6fd48d92a8aceab9",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic Info3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1100,
        "wires": []
    },
    {
        "id": "1bd2479b863055f2",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic Info2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1060,
        "wires": []
    },
    {
        "id": "c84776ff094961fc",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1350,
        "y": 960,
        "wires": [
            [
                "41cedbf540e58243"
            ]
        ]
    },
    {
        "id": "2dfbd15d06e1123e",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Topic LWT",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 900,
        "wires": []
    },
    {
        "id": "039e9bf351a7b143",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1130,
        "y": 940,
        "wires": [
            [
                "ab9cd0be56afb360",
                "b79124fc8292912c"
            ]
        ]
    },
    {
        "id": "ab9cd0be56afb360",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Tasmota Json Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 920,
        "wires": []
    },
    {
        "id": "9239471a71e1357b",
        "type": "switch",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "IDX check",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "idx",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1150,
        "y": 980,
        "wires": [
            [
                "c84776ff094961fc",
                "1337b0adf2cad739"
            ],
            [
                "82ac70ac0ee85bce"
            ]
        ]
    },
    {
        "id": "82ac70ac0ee85bce",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "no IDX availble",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1040,
        "wires": []
    },
    {
        "id": "74230db59e036f46",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Set Control",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "close",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1210,
        "y": 820,
        "wires": [
            [
                "4d1e6dd41075fd9f"
            ]
        ]
    },
    {
        "id": "4d1e6dd41075fd9f",
        "type": "trigger",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "",
        "op1": "",
        "op2": "open",
        "op1type": "pay",
        "op2type": "str",
        "duration": "3000",
        "extend": true,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1440,
        "y": 820,
        "wires": [
            [
                "b79124fc8292912c"
            ]
        ]
    },
    {
        "id": "21e0778d66ee3309",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "SZ2D, Block-gate-in",
        "links": [
            "05a036d6fb48e97c",
            "54aecbceaa8fc8a8",
            "7c015677814352ca",
            "747b48f4aef4973c"
        ],
        "x": 1095,
        "y": 820,
        "wires": [
            [
                "74230db59e036f46"
            ]
        ]
    },
    {
        "id": "04d47cb1cb469536",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Gate block",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 880,
        "wires": []
    },
    {
        "id": "5215638dcce7a520",
        "type": "change",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Set Control Ikea 1743",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "control",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "open",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1240,
        "y": 780,
        "wires": [
            [
                "728f5ec0a8ba8680"
            ]
        ]
    },
    {
        "id": "939541484e46da80",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "SZ2D, Block-gate-overrule-open",
        "links": [],
        "x": 1095,
        "y": 780,
        "wires": [
            [
                "5215638dcce7a520"
            ]
        ]
    },
    {
        "id": "728f5ec0a8ba8680",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1800",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 780,
        "wires": [
            [
                "b79124fc8292912c"
            ]
        ]
    },
    {
        "id": "2ae94a4c793aca1e",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "E1743 + Powerplug bat+link",
        "func": "var getflow = flow.keys();\nvar topicname;\n\nif (getflow !== \"\") {\n    for ( var i = 0; i < getflow.length; i++ ) {\n        var zigbeedevice = getflow[i]; //geeft het zigbee ID\n        var digits = (zigbeedevice.substring(0,2));\n        if (digits == \"0x\") {\n          topicname = flow.get(zigbeedevice)[1]; //geeft array0\n          msg.topic = \"cmnd/\" + topicname + \"/ZbInfo\"\n          msg.payload = zigbeedevice;\n          node.send(msg);\n        }\n    }\n} \nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1140,
        "wires": [
            [
                "e2b0da749269d59a"
            ]
        ]
    },
    {
        "id": "e2b0da749269d59a",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "SZ2D, Fake ikea out",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1715,
        "y": 1140,
        "wires": []
    },
    {
        "id": "eb1a54f4e46337ec",
        "type": "json",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1130,
        "y": 1140,
        "wires": [
            [
                "ec5442af7a61b18c",
                "f33352081429e5df"
            ]
        ]
    },
    {
        "id": "f33352081429e5df",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Split time",
        "func": "var minuts = msg.payload.Time\nvar array = minuts.split(\":\");\nvar value = parseFloat(array[1]);\nif (value < 5) {\n    msg.payload = value;\n} else {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1140,
        "wires": [
            [
                "2ae94a4c793aca1e"
            ]
        ]
    },
    {
        "id": "41cedbf540e58243",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Tasmota ID filter on ui table",
        "func": "if ( msg.src === 'tasmota' ) {\n    var devs = flow.get(\"t2ztable\") || {};\n    var storepayload = msg.payload;\n    var zigbeedevice\n    var zigbeevendor\n\n    for (var devN in msg.payload.ZbReceived) {\n        let devInfo = msg.payload.ZbReceived[devN];\n        let ID = devInfo.Device;\n\n        // get dev by ID\n        var dev = devs[ID] || {};\n        \n        zigbeevendor = dev.vendors;\n        zigbeedevice = dev.type;\n        storepayload[\"ZbReceived\"].idx = parseInt(dev.idx);\n        if (dev.idxoptie1 === \"n.v.t\") {\n            storepayload[\"ZbReceived\"].idxoptie1 = \"n.v.t\";\n        } else { \n            storepayload[\"ZbReceived\"].idxoptie1 = parseInt(dev.idxoptie1);\n        }\n        if (dev.idxoptie1 === \"n.v.t\") {\n            storepayload[\"ZbReceived\"].idxoptie2 = \"n.v.t\";\n        } else {\n    \t    storepayload[\"ZbReceived\"].idxoptie2 = parseInt(dev.idxoptie2);\n        }\n        if (dev.idxoptie1 === \"n.v.t\") {\n            storepayload[\"ZbReceived\"].idxoptie3 = \"n.v.t\";\n        } else {\n    \t    storepayload[\"ZbReceived\"].idxoptie3 = parseInt(dev.idxoptie3);\n        }\n        if (dev.idxoptie1 === \"n.v.t\") {\n            storepayload[\"ZbReceived\"].idxoptie4 = \"n.v.t\";\n        } else {\n    \t    storepayload[\"ZbReceived\"].idxoptie4 = parseInt(dev.idxoptie4);\n        }\n        if (dev.idxoptie1 === \"n.v.t\") {\n            storepayload[\"ZbReceived\"].idxoptie5 = \"n.v.t\";\n        } else {\n            storepayload[\"ZbReceived\"].idxoptie5 = parseInt(dev.idxoptie5);\n        }\n        //storepayload[\"ZbReceived\"].lowvoltage = parseInt(dev.lowvoltage);\n        //storepayload[\"ZbReceived\"].lowvoltage = Number(dev.lowvoltage);\n\t    storepayload[\"ZbReceived\"].zigbeeid = dev.zigbeeid;\n        storepayload[\"ZbReceived\"].topicname = dev.bridge;\n        storepayload[\"ZbReceived\"].type = dev.type;\n            \n        //msg.payload = zigbeedevice;\n        //return [msg]\n    }\n    msg.payload = storepayload;\n    if ( zigbeevendor === \"Heiman\" ) {\n        return [null, msg, null, null, null, null, null, null, null]; \n    } else if ( zigbeevendor === \"Ikea\" ) {\n        return [null, null, msg, null, null, null, null, null, null]; \n    } else if ( zigbeevendor === \"Lidl\" ) {\n        return [null, null, null, msg, null, null, null, null, null]; \n    } else if ( zigbeevendor === \"Osram\" ) {\n        return [null, null, null, null, msg, null, null, null, null]; \n    } else if ( zigbeevendor === \"Sonoff\" ) {\n        return [null, null, null, null, null, msg, null, null, null]; \n    } else if ( zigbeevendor === \"Xiaomi\" ) {\n        return [null, null, null, null, null, null, msg, null, null]; \n    } else if ( zigbeevendor === \"Tuya\" ) {\n        return [null, null, null, null, null, null, null, msg, null]; \n    } else if (zigbeevendor === \"Philips\") {\n        return [null, null, null, null, null, null, null, null, msg];\n    } else {\n        return [msg, null, null, null, null, null, null, null, null];\n    }\n}\n\nif ( msg.src === 'tasmotainfo' ) {\n    var devsinfo = flow.get(\"t2ztable\") || {};\n    var storepayloadinfo = msg.payload;\n    var zigbeedeviceinfo\n    var zigbeevendorinfo\n\n    for (var devNinfo in msg.payload.ZbInfo) {\n        let devInfoinfo = msg.payload.ZbInfo[devNinfo];\n        let IDinfo = devInfoinfo.Device;\n\n        // get dev by ID\n        var devinfo = devsinfo[IDinfo] || {};\n        \n        zigbeevendorinfo = devinfo.vendors;\n        zigbeedeviceinfo = devinfo.type;\n        storepayloadinfo[\"ZbInfo\"].idx = parseInt(devinfo.idx);\n        if (devinfo.idxoptie1 === \"n.v.t\") {\n            storepayloadinfo[\"ZbInfo\"].idxoptie1 = \"n.v.t\";\n        } else { \n            storepayloadinfo[\"ZbInfo\"].idxoptie1 = parseInt(devinfo.idxoptie1);\n        }\n        if (devinfo.idxoptie2 === \"n.v.t\") {\n            storepayloadinfo[\"ZbInfo\"].idxoptie2 = \"n.v.t\";\n        } else { \n            storepayloadinfo[\"ZbInfo\"].idxoptie2 = parseInt(devinfo.idxoptie2);\n        }\n        if (devinfo.idxoptie3 === \"n.v.t\") {\n            storepayloadinfo[\"ZbInfo\"].idxoptie3 = \"n.v.t\";\n        } else { \n            storepayloadinfo[\"ZbInfo\"].idxoptie3 = parseInt(devinfo.idxoptie3);\n        }\n        if (devinfo.idxoptie4 === \"n.v.t\") {\n            storepayloadinfo[\"ZbInfo\"].idxoptie4 = \"n.v.t\";\n        } else { \n            storepayloadinfo[\"ZbInfo\"].idxoptie4 = parseInt(devinfo.idxoptie4);\n        }\n        if (devinfo.idxoptie5 === \"n.v.t\") {\n            storepayloadinfo[\"ZbInfo\"].idxoptie5 = \"n.v.t\";\n        } else { \n            storepayloadinfo[\"ZbInfo\"].idxoptie5 = parseInt(devinfo.idxoptie5);\n        }\n\t    storepayloadinfo[\"ZbInfo\"].zigbeeid = devinfo.zigbeeid;\n        storepayloadinfo[\"ZbInfo\"].topicname = devinfo.bridge;\n        storepayloadinfo[\"ZbInfo\"].type = devinfo.type;\n            \n        //msg.payload = zigbeedevice;\n        //return [msg]\n    }\n    msg.payload = storepayloadinfo;\n    if (zigbeevendorinfo === \"Heiman\") {\n        return [null, msg, null, null, null, null, null, null, null];\n    } else if (zigbeevendorinfo === \"Ikea\") {\n        return [null, null, msg, null, null, null, null, null, null];\n    } else if (zigbeevendorinfo === \"Lidl\") {\n        return [null, null, null, msg, null, null, null, null, null];\n    } else if (zigbeevendorinfo === \"Osram\") {\n        return [null, null, null, null, msg, null, null, null, null];\n    } else if (zigbeevendorinfo === \"Sonoff\") {\n        return [null, null, null, null, null, msg, null, null, null];\n    } else if (zigbeevendorinfo === \"Xiaomi\") {\n        return [null, null, null, null, null, null, msg, null, null];\n    } else if (zigbeevendorinfo === \"Tuya\") {\n        return [null, null, null, null, null, null, null, msg, null];\n    } else if (zigbeevendorinfo === \"Philips\") {\n        return [null, null, null, null, null, null, null, null, msg];\n    } else {\n        return [msg, null, null, null, null, null, null, null, null];\n    } \n}\n\nif ( msg.src === 'domoticz' ) {\n    var devsdomoticz = flow.get(\"t2ztable\") || {};\n    var storepayloaddomoticz = msg.payload;\n    var zigbeevendordomoticz;\n    var zigbeedevicedomoticz;\n    var idxnumber = msg.payload.idx;\n    var length = Object.keys(devsdomoticz).length;\n\n    for ( var i = 0; i < length; i++ ) {\n        var keys = Object.keys(devsdomoticz);\n        var IDkey = keys[i];\n        var message = devsdomoticz[IDkey];\n        var messageidx = parseInt(devsdomoticz[IDkey].idx);\n        \n        if ( messageidx === idxnumber) {\n            zigbeevendordomoticz = message.vendors;\n            storepayloaddomoticz.type = message.type;\n            storepayloaddomoticz.idxdz = message.idx;\n            storepayloaddomoticz.zigbeeid = message.zigbeeid;\n            storepayloaddomoticz.topicname = message.bridge;\n        }\n        msg.payload = storepayloaddomoticz;\n        if ( zigbeevendordomoticz === \"Heiman\" ) {\n            return [null, msg, null, null, null, null, null, null, null]; \n        } else if ( zigbeevendordomoticz === \"Ikea\" ) {\n            return [null, null, msg, null, null, null, null, null, null]; \n        } else if ( zigbeevendordomoticz === \"Lidl\" ) {\n            return [null, null, null, msg, null, null, null, null, null]; \n        } else if ( zigbeevendordomoticz === \"Osram\" ) {\n            return [null, null, null, null, msg, null, null, null, null]; \n        } else if ( zigbeevendordomoticz === \"Sonoff\" ) {\n            return [null, null, null, null, null, msg, null, null, null]; \n        } else if ( zigbeevendordomoticz === \"Xiaomi\" ) {\n            return [null, null, null, null, null, null, msg, null, null]; \n        } else if ( zigbeevendordomoticz === \"Tuya\" ) {\n            return [null, null, null, null, null, null, null, msg, null]; \n        } else if ( zigbeevendordomoticz === \"Philips\") {\n            return [null, null, null, null, null, null, null, null, msg]; \n        }\n    }\n            return [msg, null, null, null, null, null, null, null, null]; \n}",
        "outputs": 9,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 960,
        "wires": [
            [
                "73bee147db0c1049",
                "a45b91d018b1c4dd"
            ],
            [
                "bf0d38c8dfb35a00"
            ],
            [
                "a2c90bdd9a686312"
            ],
            [
                "a6fca003696ee313"
            ],
            [
                "855afc849e4e07ba"
            ],
            [
                "9543bac4a8ed8022"
            ],
            [
                "f75b5a74fb3c5605"
            ],
            [
                "2b57dfa562575fb1"
            ],
            [
                "bab452cce1c37ce8"
            ]
        ]
    },
    {
        "id": "1337b0adf2cad739",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "IDX Check",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1000,
        "wires": []
    },
    {
        "id": "b79124fc8292912c",
        "type": "gate",
        "z": "3c1abf359e6df878",
        "g": "90fb73daae47154a",
        "name": "Gate",
        "controlTopic": "control",
        "defaultState": "open",
        "openCmd": "open",
        "closeCmd": "close",
        "toggleCmd": "toggle",
        "defaultCmd": "default",
        "persist": false,
        "x": 1670,
        "y": 940,
        "wires": [
            [
                "04d47cb1cb469536",
                "41cedbf540e58243"
            ]
        ]
    },
    {
        "id": "8594d9e519e7907b",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "SZ2D, Tuya Powerplug TS011F out",
        "mode": "link",
        "links": [
            "37f607c2fe57abf8",
            "4a1dc2876fecea47"
        ],
        "x": 2715,
        "y": 1940,
        "wires": []
    },
    {
        "id": "37f607c2fe57abf8",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "SZ2D, Tuya Powerplug TS011F in",
        "links": [
            "8594d9e519e7907b"
        ],
        "x": 3035,
        "y": 1940,
        "wires": [
            [
                "0d9c31748025070d"
            ]
        ]
    },
    {
        "id": "0d9c31748025070d",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "Tuya powerplug TS011F",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 1940,
        "wires": []
    },
    {
        "id": "2b57dfa562575fb1",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "Tuya devices",
        "func": "if (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Remote (TS0044)\") {\n        return [msg, null];\n    }else if (msg.payload.ZbReceived.type === \"Plug (TS011F)\") {\n        return [null, msg];\n    }\n}\n\nif (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Remote (TS0044)\") {\n        return [msg, null]\n    } else if (msg.payload.ZbInfo.type === \"Plug (TS011F)\") {\n        return [null, msg];\n    }\n}\n\nif ( msg.src === 'domoticz' ) {\n    if (msg.payload.type === \"Plug (TS011F)\") {\n        return [null, msg];\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1920,
        "wires": [
            [
                "8e309c4915312ec0"
            ],
            [
                "8594d9e519e7907b"
            ]
        ]
    },
    {
        "id": "bab452cce1c37ce8",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "be20e57190035e20",
        "name": "Philips devices",
        "func": "if (msg.payload.ZbInfo) {\n    if (msg.payload.ZbInfo.type === \"Light (Lux A19 bulb E27)\") {\n        return msg;\n    }\n}\n\nif (msg.payload.ZbReceived) {\n    if (msg.payload.ZbReceived.type === \"Light (Lux A19 bulb E27)\") {\n        return msg;\n    }\n}\n\nif ( msg.src === 'domoticz' ) {\n    if (msg.payload.type === \"Light (Lux A19 bulb E27)\") {\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2520,
        "y": 2040,
        "wires": [
            [
                "0949a569c2ba16fe"
            ]
        ]
    },
    {
        "id": "0949a569c2ba16fe",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "be20e57190035e20",
        "name": "SZ2D, Philips Lux A19 bulb E27 out",
        "mode": "link",
        "links": [
            "83b3ad54f095fa2f",
            "97b137d1b50a1111"
        ],
        "x": 2715,
        "y": 2040,
        "wires": []
    },
    {
        "id": "83b3ad54f095fa2f",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "be20e57190035e20",
        "name": "SZ2D, Philips Lux A19 bulb E27 in",
        "links": [
            "0949a569c2ba16fe"
        ],
        "x": 3035,
        "y": 2040,
        "wires": [
            [
                "8a1174008e15e359"
            ]
        ]
    },
    {
        "id": "8a1174008e15e359",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "be20e57190035e20",
        "name": "Philiphs HUE Lux A19 bulb E27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 2040,
        "wires": []
    },
    {
        "id": "943615acd1aeadfb",
        "type": "ui_text_input",
        "z": "3c1abf359e6df878",
        "g": "9d0f572b4aa1aba2",
        "name": "",
        "label": "IDX optie 5",
        "tooltip": "",
        "group": "067a41fe6b8deb07",
        "order": 13,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "250",
        "topic": "idxoptie5",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 670,
        "y": 2260,
        "wires": [
            [
                "434d961017963f40"
            ]
        ]
    },
    {
        "id": "f98c5ac56bf813ec",
        "type": "comment",
        "z": "3c1abf359e6df878",
        "name": "To-Do-List",
        "info": "",
        "x": 560,
        "y": 320,
        "wires": []
    },
    {
        "id": "ad09533520502602",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Doorcontact, ZbReceived[zigbeeid].Contact 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n\t        if (msg.payload.ZbReceived[zigbeeid].Contact === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"Battery\" : battery, \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n\t        else if (msg.payload.ZbReceived[zigbeeid].Contact === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 360,
        "wires": [
            [
                "a055120ed19f9044",
                "c34f602ad8bccc63"
            ]
        ]
    },
    {
        "id": "a055120ed19f9044",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, Standard device nodes to mqtt",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 3115,
        "y": 480,
        "wires": []
    },
    {
        "id": "ab1f478b73c08bc7",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard doorcontact",
        "links": [
            "5b5017c20dbced26",
            "adc88992cb43371c"
        ],
        "x": 2455,
        "y": 360,
        "wires": [
            [
                "ad09533520502602"
            ]
        ]
    },
    {
        "id": "c34f602ad8bccc63",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard doorcontact",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 360,
        "wires": []
    },
    {
        "id": "36a07c9d36434013",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Motion sensor, ZbReceived[zigbeeid].Occupancy 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n        battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n    let idxoptie1 = msg.payload.ZbReceived.idxoptie1;\n    let msgoptie1;\n    let illuminance;\n         \n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"Illuminance\")) {\n            illuminance = msg.payload.ZbReceived[zigbeeid].Illuminance;\n        } else {\n            illuminance = undefined;\n        }\n    \n        if ( idx !== 0 ) {\n            if (msg.payload.ZbReceived[zigbeeid].Occupancy === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"Battery\" : battery, \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].Occupancy === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n\n        if ((idxoptie1 === 0) || (idxoptie1 === \"n.v.t\") || (idxoptie1 === \"Niet ingesteld\")) {\n            msgoptie1 = null;\n        } else {\n            if (illuminance !== undefined) {\n                msgoptie1 = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idxoptie1, \"svalue\": \"\" + illuminance + \"\" } };\n            } else {\n                msgoptie1 = null;\n            }\n        }\n\n        value.state = state;\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return [[msg, msgoptie1]];\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2760,
        "y": 400,
        "wires": [
            [
                "0358bf193f1f1dd8",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "0358bf193f1f1dd8",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard motion sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 400,
        "wires": []
    },
    {
        "id": "b44b0868eed7faa8",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard motion sensor",
        "links": [
            "a6bd480b80119757",
            "fb7bbf24b18c4851",
            "7272d964025bfec8",
            "17345b5def7dd23b"
        ],
        "x": 2455,
        "y": 400,
        "wires": [
            [
                "36a07c9d36434013"
            ]
        ]
    },
    {
        "id": "95f61cdfbd2a6673",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Smoke detector, ZbReceived[zigbeeid].Fire 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            if (msg.payload.ZbReceived[zigbeeid].Fire === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"Battery\" : battery, \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].Fire === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 320,
        "wires": [
            [
                "1024b7339f81dbdd",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "a4ba7dd1095cec68",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard smoke detector",
        "links": [
            "a8b0c83b08b5b798",
            "6cc8ca977d371564"
        ],
        "x": 2455,
        "y": 320,
        "wires": [
            [
                "95f61cdfbd2a6673"
            ]
        ]
    },
    {
        "id": "1024b7339f81dbdd",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard smoke detector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3220,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d6872d63d570b48",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Monoxide detector, ZbReceived[zigbeeid].CO 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            if (msg.payload.ZbReceived[zigbeeid].CO === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"Battery\" : battery, \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].CO === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 280,
        "wires": [
            [
                "d635886cf9f08538",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "b21a01ac9c8c45e3",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard monoxide detector",
        "links": [
            "a9a40afb90f39708"
        ],
        "x": 2455,
        "y": 280,
        "wires": [
            [
                "6d6872d63d570b48"
            ]
        ]
    },
    {
        "id": "d635886cf9f08538",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard monoxide detector",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3230,
        "y": 280,
        "wires": []
    },
    {
        "id": "9639d38023fc8ef8",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Powerplug, ZbReceived[zigbeeid].Power 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let idxoptie1 = msg.payload.ZbReceived.idxoptie1;\n    let idxoptie2 = msg.payload.ZbReceived.idxoptie2;\n    let idxoptie3 = msg.payload.ZbReceived.idxoptie3;\n    let idxoptie4 = msg.payload.ZbReceived.idxoptie4;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n   \n        let voltage;\n        let power;\n        let current;\n        let energy;\n        if ((idxoptie1 !== 0) || (idxoptie1 !== \"n.v.t\") || (idxoptie1 !== \"Niet ingesteld\")) {\n            if (msg.payload.ZbReceived[\"0x5B7F\"].hasOwnProperty(\"RMSVoltage\")) {\n                voltage = msg.payload.ZbReceived[zigbeeid].RMSVoltage;\n                voltage = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idxoptie1, \"svalue\": \"\" + voltage + \"\" } };\n            } else {\n                voltage = null;\n            }\n        } else {\n            voltage = null;\n        }\n    \n        if ((idxoptie2 !== 0) || (idxoptie2 !== \"n.v.t\") || (idxoptie2 !== \"Niet ingesteld\")) {\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"ActivePower\")) {\n                power = msg.payload.ZbReceived[zigbeeid].ActivePower;\n                power = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idxoptie2, \"svalue\": \"\" + power + \"\" } };\n            } else {\n                power = null;\n            }\n        } else {\n            power = null;\n        }\n\n        if ((idxoptie3 !== 0) || (idxoptie3 !== \"n.v.t\") || (idxoptie3 !== \"Niet ingesteld\")) {\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"RMSCurrent\")) {\n                current = msg.payload.ZbReceived[zigbeeid].RMSCurrent;\n                current = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idxoptie2, \"svalue\": \"\" + current + \"\" } };\n            } else {\n                current = null;\n            }\n        } else {\n            current = null;\n        }\n\n        if ((idxoptie4 !== 0) || (idxoptie4 !== \"n.v.t\") || (idxoptie4 !== \"Niet ingesteld\")) {\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"EnergyTotal\")) {\n                energy = msg.payload.ZbReceived[zigbeeid].EnergyTotal;\n                energy = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idxoptie2, \"svalue\": \"\" + energy + \"\" } };\n            } else {\n                energy = null;\n            }\n        } else {\n            energy = null;\n        }\n\n        if (idx !== 0) {\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"Power\")) {\n                if (msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                    if (stored.state === 0 || stored.state === 3) {\n                        state = 1;\n                        msg.payload = { \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"RSSI\": rssi, };\n                    } else if (stored.state === 1) {\n                        msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"RSSI\": rssi, \"parse\": false };\n                    }\n                } else if (msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                    if (stored.state === 1 || stored.state === 3) {\n                        state = 0;\n                        msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, };\n                    } else if (stored.state === 0) {\n                        msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, \"parse\": false };\n                    }\n                } else {\n                    msg = null;\n                }\n            } else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n\n        value.state = state;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return [[msg, voltage, power, current, energy]];\n    }\n}\n\nif (msg.src === 'domoticz') {\n    let zigbeeid = msg.payload.zigbeeid;\n    let topicname = msg.payload.topicname;\n    var msgpower;\n\n    if (msg.payload.nvalue === 1) {\n        msgpower = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 1 } } };\n        return msgpower;\n    } else if (msg.payload.nvalue === 0) {\n        msgpower = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 0 } } };\n        return msgpower;\n    } else {\n        return;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 440,
        "wires": [
            [
                "e2e2746526d5ea52",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "4a1dc2876fecea47",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard powerplug",
        "links": [
            "8ab850f412826e0f",
            "22e0a3f2fcfd8827",
            "8594d9e519e7907b",
            "6f900f263f675bab"
        ],
        "x": 2455,
        "y": 440,
        "wires": [
            [
                "9639d38023fc8ef8"
            ]
        ]
    },
    {
        "id": "e2e2746526d5ea52",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard power plug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 440,
        "wires": []
    },
    {
        "id": "3cd637fad2d42539",
        "type": "inject",
        "z": "3c1abf359e6df878",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 880,
        "y": 700,
        "wires": [
            [
                "7a66f29b5820ad0e"
            ]
        ]
    },
    {
        "id": "7a66f29b5820ad0e",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "delete zigbeeidxtabel",
        "func": "msg.payload = [{\"empty\": \"empty\"}];\nlet destination = flow.get(\"savefiledestination\");\nmsg.filename = destination + \"/zigbeeidxtabel.txt\";\nlet version = flow.get(\"NoderedVersion\");\nlet array = version.split(\".\");\nif (Number(array[0]) < 3) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 700,
        "wires": [
            [
                "fb1f0b05e380d115"
            ],
            [
                "ed0f2cde8aba7e75"
            ]
        ]
    },
    {
        "id": "fb1f0b05e380d115",
        "type": "file",
        "z": "3c1abf359e6df878",
        "name": "Save to file",
        "filename": "",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1350,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "ed0f2cde8aba7e75",
        "type": "file",
        "z": "3c1abf359e6df878",
        "name": "Save to file",
        "filename": "filename",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "x": 1350,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "d822d082a2b75851",
        "type": "function",
        "z": "3c1abf359e6df878",
        "name": "Payload2Object",
        "func": "delete msg.payload;\nlet store = flow.get(\"tasmotas\") || {};\nlet msg2 = Object.assign({}, store);\nreturn [{payload:(msg2)}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 2640,
        "wires": [
            [
                "3fcf61f3615fd1c9"
            ]
        ]
    },
    {
        "id": "3fcf61f3615fd1c9",
        "type": "split",
        "z": "3c1abf359e6df878",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 350,
        "y": 2640,
        "wires": [
            [
                "bddd27a7de3806fd"
            ]
        ]
    },
    {
        "id": "bddd27a7de3806fd",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "Bridgename2topic",
        "func": "var value = msg.payload.name\nmsg.topic = value;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 2640,
        "wires": [
            [
                "22d4eb8470e7d47b"
            ]
        ]
    },
    {
        "id": "240845503160872e",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "ZbInfo to TasmotaZigbeeBridges",
        "func": "msg.topic = \"cmnd/\" + msg.payload.name + \"/ZbInfo\";\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 2640,
        "wires": [
            [
                "e9716480c1c3ad78"
            ]
        ]
    },
    {
        "id": "e9716480c1c3ad78",
        "type": "link out",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "SZ2D, ZbInfo to Bridge",
        "mode": "link",
        "links": [
            "2b842f86e3188add"
        ],
        "x": 1175,
        "y": 2640,
        "wires": []
    },
    {
        "id": "bece6aa5385e92fa",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Lux sensor, ZbReceived[zigbeeid].Illuminance",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (idx !== 0) {\n            let lux = msg.payload.ZbReceived[zigbeeid].Illuminance\n            if (lux !== undefined) {\n                msg = { \"topic\": \"domoticz/in\", \"payload\": { \"command\": \"udevice\", \"idx\": idx, \"svalue\": \"\" + lux + \"\", \"Battery\": battery, \"RSSI\": rssi } };\n            } else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 240,
        "wires": [
            [
                "a055120ed19f9044",
                "39c0f98e24b8ec72"
            ]
        ]
    },
    {
        "id": "39c0f98e24b8ec72",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard lux sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 240,
        "wires": []
    },
    {
        "id": "b598e9736ebb53ed",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard lux sensor",
        "links": [
            "694f436c49668d06"
        ],
        "x": 2455,
        "y": 240,
        "wires": [
            [
                "bece6aa5385e92fa"
            ]
        ]
    },
    {
        "id": "5293ae9cf3d6c668",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Water sensor, ZbReceived[zigbeeid].Water 0/1",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n\t        if (msg.payload.ZbReceived[zigbeeid].Water === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"Battery\" : battery, \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n\t        else if (msg.payload.ZbReceived[zigbeeid].Water === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"Battery\": battery, \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2740,
        "y": 200,
        "wires": [
            [
                "71b10117abc10427",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "71b10117abc10427",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard lux sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 200,
        "wires": []
    },
    {
        "id": "752d7fe6b164e397",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard water sensor",
        "links": [
            "a82f9fadb61abcb2"
        ],
        "x": 2455,
        "y": 200,
        "wires": [
            [
                "5293ae9cf3d6c668"
            ]
        ]
    },
    {
        "id": "8853f3a4da21ed12",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "CCT light, ZbReceived[zigbeeid].Power 0/1 + Dimm",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if ( idx !== 0 ) {\n\t        if (msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n\t        else if (msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}\n\nif (msg.src === 'domoticz') {\n    let zigbeeid = msg.payload.zigbeeid\n    let topicname = msg.payload.topicname;\n    let level = (msg.payload.Level * 2.54);\n    let color;\n\n    if (msg.payload.Color === null) {\n        color = (153);\n    } else {\n        color = ((msg.payload.Color.t * 1.37) + 153);\n    }\n    \n    if (msg.payload.nvalue === 1) {\n        msg = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 1 } } };\n        return msg;\n    } else if (msg.payload.nvalue === 0) {\n        msg = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 0 } } };\n        return msg;\n    }\n    else {\n        let msgcol = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"CT\": color } } };\n        let msglev = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Dimmer\": level } } };\n        return [[msgcol, msglev]];\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 160,
        "wires": [
            [
                "b3c21a790b269911",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "b3c21a790b269911",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard CCT light",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 160,
        "wires": []
    },
    {
        "id": "97b137d1b50a1111",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard CCT light",
        "links": [
            "7c015677814352ca",
            "747b48f4aef4973c",
            "0949a569c2ba16fe"
        ],
        "x": 2455,
        "y": 160,
        "wires": [
            [
                "8853f3a4da21ed12"
            ]
        ]
    },
    {
        "id": "cd524ca6d9fb70e5",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f8c9fe6685106ccb",
        "name": "Osram switch mini",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n    let update\n        if ( idx !== 0 ) {\n            //Up\n            if (msg.payload.ZbReceived[zigbeeid][\"0006!01\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Endpoint === 1 && msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"10\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"10\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Up hold\n            else if (msg.payload.ZbReceived[zigbeeid][\"0008!05\"] === \"0026\" && msg.payload.ZbReceived[zigbeeid].DimmerMove === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"20\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"20\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Up release\n            else if (msg.payload.ZbReceived[zigbeeid][\"0008!03\"] === \"\" && msg.payload.ZbReceived[zigbeeid].DimmerStop === true && msg.payload.ZbReceived[zigbeeid].Endpoint === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"30\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"30\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Circle\n            else if (msg.payload.ZbReceived[zigbeeid][\"0008!04\"] === \"FE0A00\" && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"40\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"40\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Circle hold\n            else if (msg.payload.ZbReceived[zigbeeid][\"0300!01\"] === \"0119\" && msg.payload.ZbReceived[zigbeeid].HueMove === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"50\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"50\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Circle release\n            else if (msg.payload.ZbReceived[zigbeeid][\"0300!01\"] === \"0000\" && msg.payload.ZbReceived[zigbeeid].HueMove === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"60\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"60\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Down\n            else if (msg.payload.ZbReceived[zigbeeid][\"0006!00\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Endpoint === 2 && msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"70\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"70\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Down hold\n            else if (msg.payload.ZbReceived[zigbeeid][\"0008!01\"] === \"0126\" && msg.payload.ZbReceived[zigbeeid].DimmerMove === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"80\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"80\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Down release\n            else if (msg.payload.ZbReceived[zigbeeid][\"0008!03\"] === \"\" && msg.payload.ZbReceived[zigbeeid].DimmerStop === true && msg.payload.ZbReceived[zigbeeid].Endpoint === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"90\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"90\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1200,
        "wires": [
            [
                "e1ff2de83f9489a5"
            ]
        ]
    },
    {
        "id": "303abee8859d7178",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "4813a2060540ee71",
        "name": "Xiaomi smart cube",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            //Wakeup\n            if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"wakeup\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"0\", \"svalue1\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Shake\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"shake\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"10\", \"svalue1\": \"10\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"10\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Slide\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"slide\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"20\", \"svalue1\": \"20\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"20\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Flip90\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"flip90\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"30\", \"svalue1\": \"30\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"30\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Flip180\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"flip180\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"40\", \"svalue1\": \"40\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"40\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Rotate\n            else if ((msg.payload.ZbReceived[zigbeeid].Aqara_FF05 > 0) && (msg.payload.ZbReceived[zigbeeid].Endpoint === 3)) {\n                if (msg.payload.ZbReceived[zigbeeid].AqaraRotate > 0) {\n                    //Rotate right\n                    //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"50\", \"svalue1\": \"50\", \"Battery\": battery, \"RSSI\": rssi, };\n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"50\", \"Battery\": battery, \"RSSI\": rssi }\n                } else if (msg.payload.ZbReceived[zigbeeid].AqaraRotate < 0) {\n                    // Rotate left\n                    //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"60\", \"svalue1\": \"60\", \"Battery\": battery, \"RSSI\": rssi, };\n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"60\", \"Battery\": battery, \"RSSI\": rssi }\n                }\n            }\n            //Tap (nooit gezien dat tasmota deze doorgeeft, maar preventief toegevoegd)\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"tap\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"70\", \"svalue1\": \"70\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"70\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Fall (nooit gezien dat tasmota deze doorgeeft, maar preventief toegevoegd)\n            else if (msg.payload.ZbReceived[zigbeeid].AqaraCube === \"fall\") {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"80\", \"svalue1\": \"80\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"80\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 1800,
        "wires": [
            [
                "da7de401c93fb6d9"
            ]
        ]
    },
    {
        "id": "47872c93833c55aa",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "05ceb2a997096c5a",
        "name": "Sonoff SNZB-01 switch",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            //off (nog nooit een off gezien vanuit device, dit zijn fake controle waarden)\n            if (msg.payload.ZbReceived[zigbeeid][\"0006!00\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"0\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            // single push\n            else if (msg.payload.ZbReceived[zigbeeid][\"0006!02\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Power === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"10\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"10\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //double fast push\n            else if (msg.payload.ZbReceived[zigbeeid][\"0006!01\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"20\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"20\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //hold\n            else if (msg.payload.ZbReceived[zigbeeid][\"0006!00\"] === \"\" && msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"30\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"30\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1300,
        "wires": [
            [
                "e5338bba2c619bba"
            ]
        ]
    },
    {
        "id": "8e309c4915312ec0",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "f3740e1909d3ff06",
        "name": "Tuya 4 button sw TS0044",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n        battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            //Button 1 1x drukken\n            if (msg.payload.ZbReceived[zigbeeid].LidlPower === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"10\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"10\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 1 2x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"20\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"20\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 1 hold\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 2 && msg.payload.ZbReceived[zigbeeid].Endpoint === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"30\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"30\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 2 1x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"40\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"40\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 2 2x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"50\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"50\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 2 hold\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 2 && msg.payload.ZbReceived[zigbeeid].Endpoint === 2) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"60\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"60\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 3 1x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"70\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"70\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 3 2x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"80\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"80\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 3 hold\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 2 && msg.payload.ZbReceived[zigbeeid].Endpoint === 3) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"90\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"90\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 4 1x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 0 && msg.payload.ZbReceived[zigbeeid].Endpoint === 4) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"100\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"100\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 4 2x drukken\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 1 && msg.payload.ZbReceived[zigbeeid].Endpoint === 4) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"110\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"110\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            //Button 4 hold\n            else if (msg.payload.ZbReceived[zigbeeid].LidlPower === 2 && msg.payload.ZbReceived[zigbeeid].Endpoint === 4) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"120\", \"Battery\": battery, \"RSSI\": rssi, };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"120\", \"Battery\": battery, \"RSSI\": rssi }\n            }\n            else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2810,
        "y": 1900,
        "wires": [
            [
                "0b16f7168ac62a5a"
            ]
        ]
    },
    {
        "id": "6f6fe1db1f77af84",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "RGB light, ZbReceived[zigbeeid].Power 0/1 + RGB",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        if (stored.state === undefined) {\n            stored.state = 3;\n        }\n   \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if ( idx !== 0 ) {\n\t        if (msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                if (stored.state === 0 || stored.state === 3) {\n                    state = 1;      \n                    msg.payload = {\"idx\" : idx,\"nvalue\" : 1, \"svalue1\" : \"On\", \"RSSI\" : rssi, };                \n                } else if (stored.state === 1) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 1, \"svalue1\": \"On\", \"RSSI\": rssi, \"parse\": false };\n                }\n            }\n\t        else if (msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                if (stored.state === 1 || stored.state === 3) {\n                    state = 0;   \n                    msg.payload = { \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, };\n                } else if (stored.state === 0) {  \n                    msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"nvalue\": 0, \"svalue1\": \"Off\", \"RSSI\": rssi, \"parse\": false};\n                }\n            } else {\n        \t    msg = null; \n        \t}\n        } else {\n            msg = null;\n        }\n    \n        value.state = state;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}\n\nif (msg.src === 'domoticz') {\n    let zigbeeid = msg.payload.zigbeeid\n    let topicname = msg.payload.topicname;\n    let level = (msg.payload.Level * 2.54);\n    let color;\n\n    let R = msg.payload.Color.r / 255;\n    let G = msg.payload.Color.g / 255;\n    let B = msg.payload.Color.b / 255;\n\n    let X = R * 0.649926 + G * 0.103455 + B * 0.197109;\n    let Y = R * 0.234327 + G * 0.743075 + B * 0.022598;\n    let Z = R * 0.0000000 + G * 0.053077 + B * 1.035763;\n\n    let first = (X / (X + Y + Z)) * 65536;\n    let second = (Y / (X + Y + Z)) * 65536;\n\n    let RGB = \"\" + first + \",\" + second + \"\"\n\n    if (msg.payload.Color === null) {\n        color = (153);\n    }\n    else {\n        color = ((msg.payload.Color.t * 1.37) + 153);\n    }\n\n\n    if (msg.payload.nvalue === 1) {\n        msg = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 1 } } };\n        return [msg, null];\n    } else if (msg.payload.nvalue === 0) {\n        msg = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Power\": 0 } } };\n        return [msg, null];\n    }\n    else {\n        var msgcolor\n        if (msg.payload.Color.t === 0) {\n            msgcolor = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Color\": RGB } } };\n        } else {\n            msgcolor = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"CT\": color } } };\n        }\n        let msglev = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Send\": { \"Dimmer\": level } } };\n        return [msgcolor, msglev];\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 120,
        "wires": [
            [
                "a055120ed19f9044",
                "62956d3ddbebb8e6"
            ]
        ]
    },
    {
        "id": "62956d3ddbebb8e6",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard RGB light",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3200,
        "y": 120,
        "wires": []
    },
    {
        "id": "4c242ca317c2b3c4",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard RGB light",
        "links": [
            "54aecbceaa8fc8a8"
        ],
        "x": 2455,
        "y": 120,
        "wires": [
            [
                "6f6fe1db1f77af84"
            ]
        ]
    },
    {
        "id": "62b9282bdb64fd9b",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Temp sensor, ZbReceived[zigbeeid].Temperature",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (stored.state !== undefined) {\n            value.state = stored.state;\n        } else {\n            value.state = undefined;\n        }\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        if (idx !== 0) {\n            let temp;\n            let hum;\n            let humstat = 0;\n            let bar;\n            let forecast = 0;\n\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"Temperature\")) {\n                let tempdummy = msg.payload.ZbReceived[zigbeeid].Temperature;\n                temp = (Math.round(tempdummy * 10)) / 10.0;\n            } \n\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"Humidity\")) {\n                hum = msg.payload.ZbReceived[zigbeeid].Humidity;\n                if (hum < 30) {\n                    humstat = 2;\n                } else if ((hum >= 30) && (hum <= 45)) {\n                    humstat = 0;\n                } else if ((hum >= 46) && (hum <= 70)) {\n                    humstat = 1;\n                } else {\n                    humstat = 3;\n                }\n            }\n\n            if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"Pressure\")) {\n                bar = msg.payload.ZbReceived[zigbeeid].Pressure;\n                if (bar < 966) {\n                    forecast = 4;\n                } else if (bar < 993) {\n                    forecast = 3;\n                } else if (bar < 1007) {\n                    forecast = 2;\n                } else if (bar < 1013) {\n                    forecast = 3;\n                } else if (bar < 1033) {\n                    forecast = 1;\n                } else {\n                    forecast = 0;\n                }\n            }\n\n            if (temp !== undefined && hum !== undefined && bar !== undefined) {\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"svalue\": \"\" + temp + \";\" + hum + \";\" + humstat + \";\" + bar + \";\" + forecast + \"\", \"Battery\": battery, \"RSSI\": rssi };\n            } else if (temp !== undefined && hum !== undefined) {\n                msg.payload =  { \"command\": \"udevice\", \"idx\": idx, \"svalue\": \"\" + temp + \";\" + hum + \";\" + humstat + \"\", \"Battery\": battery, \"RSSI\": rssi };\n            } else {\n                msg = null;\n            }\n        } else {\n            msg = null;\n        }\n    \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 80,
        "wires": [
            [
                "c28e1d455bfdd201",
                "a055120ed19f9044"
            ]
        ]
    },
    {
        "id": "c28e1d455bfdd201",
        "type": "debug",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "Standaard Temp sensor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3210,
        "y": 80,
        "wires": []
    },
    {
        "id": "f1beec20c9c89685",
        "type": "link in",
        "z": "3c1abf359e6df878",
        "g": "50fbc45746000899",
        "name": "SZ2D, standaard Temp sensor",
        "links": [
            "f1facb7cd579e6b4",
            "f17ee1b1deaf2f61",
            "16a24ac5537ce50d"
        ],
        "x": 2455,
        "y": 80,
        "wires": [
            [
                "62b9282bdb64fd9b"
            ]
        ]
    },
    {
        "id": "2e499290ea8e9d20",
        "type": "function",
        "z": "3c1abf359e6df878",
        "g": "28dfc6fdcd950d23",
        "name": "Ikea E1743 remote",
        "func": "msg.topic = \"domoticz/in\";\nlet stored;\nlet state;\nlet battery;\nlet rssi;\nlet value = {};\n\nif (msg.src === 'tasmotainfo') {\n    let zigbeeid = msg.payload.ZbInfo.zigbeeid;\n    stored = context.get(zigbeeid) || {};\n    \n    if (msg.payload.ZbInfo[zigbeeid]) {\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbInfo[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbInfo[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbInfo[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n\n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n        return;\n    }\n}\n\nif (msg.src === 'tasmota') {\n    let idx = msg.payload.ZbReceived.idx;\n    let zigbeeid = msg.payload.ZbReceived.zigbeeid;\n    var topicname = msg.payload.ZbReceived.topicname;\n    let askbat;\n\n    if ( msg.payload.ZbReceived[zigbeeid] ) {    \n        stored = context.get(zigbeeid) || {};\n        \n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryPercentage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryPercentage;\n        } else if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"BatteryVoltage\")) {\n            battery = msg.payload.ZbReceived[zigbeeid].BatteryVoltage;\n            battery = (battery / 3) * 100;\n            if (battery > 100) {\n                battery = 100;\n            }\n            battery = parseInt(battery);\n        } else {\n            if (stored.batt === undefined) {\n                battery = 255;\n            } else {\n                battery = stored.batt;\n            }\n        }\n\n        if (msg.payload.ZbReceived[zigbeeid].hasOwnProperty(\"LinkQuality\")) {\n            rssi = msg.payload.ZbReceived[zigbeeid].LinkQuality;\n            rssi = (rssi / 254) * 11;\n            if (rssi > 11) {\n                rssi = 11;\n            }\n            rssi = parseInt(rssi);\n        } else {\n            if (stored.rssi === undefined) {\n                rssi = 255;\n            } else {\n                rssi = stored.rssi;\n            }\n        }\n    \n        if ( idx !== 0 ) {\n            if (msg.payload.ZbReceived[zigbeeid].Power === 0) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"0\" };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"0\", \"Battery\": battery, \"RSSI\": rssi }\n                askbat = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Read\": { \"BatteryPercentage\": false } } };\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].Power === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"10\" };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"10\", \"Battery\": battery, \"RSSI\": rssi }\n                askbat = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Read\": { \"BatteryPercentage\": false } } };\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].DimmerMove === 0) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"20\" };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"20\", \"Battery\": battery, \"RSSI\": rssi }\n                askbat = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Read\": { \"BatteryPercentage\": false } } };\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].DimmerMove === 1) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"30\" };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"30\", \"Battery\": battery, \"RSSI\": rssi }\n                askbat = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Read\": { \"BatteryPercentage\": false } } };\n            }\n            else if (msg.payload.ZbReceived[zigbeeid].DimmerStop === true) {\n                //msg.payload = { \"command\": \"switchlight\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"level\": \"40\" };\n                msg.payload = { \"command\": \"udevice\", \"idx\": idx, \"switchcmd\": \"Set Level\", \"svalue\": \"40\", \"Battery\": battery, \"RSSI\": rssi }\n                askbat = { \"topic\": \"cmnd/\" + topicname + \"/ZbSend\", \"payload\": { \"Device\": zigbeeid, \"Read\": { \"BatteryPercentage\": false } } };\n            }\n            else {\n                msg = null;\n                askbat = null;\n            }\n        } else {\n            msg = null;\n            askbat = null;\n        }\n   \n        value.batt = battery;\n        value.rssi = rssi;\n        context.set(zigbeeid, value);\n\n        return [msg, askbat];\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2790,
        "y": 800,
        "wires": [
            [
                "c32e30cbaf14dacf"
            ],
            [
                "90fad3910c548d2d"
            ]
        ]
    },
    {
        "id": "22d4eb8470e7d47b",
        "type": "delay",
        "z": "3c1abf359e6df878",
        "g": "53cf74558832dc34",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 740,
        "y": 2640,
        "wires": [
            [
                "240845503160872e"
            ]
        ]
    },
    {
        "id": "f6d80247ef4490ac",
        "type": "ui_spacer",
        "z": "3c1abf359e6df878",
        "name": "spacer",
        "group": "067a41fe6b8deb07",
        "order": 14,
        "width": 12,
        "height": 1
    },
    {
        "id": "2441a664ac3cb3a1",
        "type": "ui_spacer",
        "z": "3c1abf359e6df878",
        "name": "spacer",
        "group": "c9e8745706090d40",
        "order": 4,
        "width": 1,
        "height": 1
    },
    {
        "id": "505eb0154b7e74d4",
        "type": "ui_spacer",
        "z": "3c1abf359e6df878",
        "name": "spacer",
        "group": "c9e8745706090d40",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "d3717f81530bcbc1",
        "type": "ui_spacer",
        "z": "3c1abf359e6df878",
        "name": "spacer",
        "group": "c9e8745706090d40",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "3bceb8b8f9338f0e",
        "type": "ui_spacer",
        "z": "3c1abf359e6df878",
        "name": "spacer",
        "group": "c9e8745706090d40",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "b1bc1db1ae7424c0",
        "type": "mqtt-broker",
        "name": "",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "verifyservercert": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "067a41fe6b8deb07",
        "type": "ui_group",
        "name": "Idx tabel",
        "tab": "38aee4232c878544",
        "order": 3,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc177b9d12958d78",
        "type": "ui_group",
        "name": "Tasmota editor",
        "tab": "38aee4232c878544",
        "order": 2,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "71f4e9b937321363",
        "type": "ui_group",
        "name": "Set custom page domoticz",
        "tab": "38aee4232c878544",
        "order": 7,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c9e8745706090d40",
        "type": "ui_group",
        "name": "Debug flow mqtt berichten",
        "tab": "38aee4232c878544",
        "order": 6,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "31c858b1f905e9ad",
        "type": "ui_group",
        "name": "Versie nummer",
        "tab": "38aee4232c878544",
        "order": 1,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "820d633cf842d21f",
        "type": "ui_group",
        "name": "",
        "tab": "38aee4232c878544",
        "order": 8,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9d7647bdd05009d8",
        "type": "ui_group",
        "name": "Zigbee tabel",
        "tab": "38aee4232c878544",
        "order": 5,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "298a46833b4247e5",
        "type": "config-log",
        "logname": "DeviceLogSonoffZigbee",
        "logdir": "/home/pi/domoticz/plugins/tasmota2zigbee/",
        "stamp": "local",
        "logstyle": "plain",
        "logrotate": true,
        "logcompress": false,
        "logrotatecount": "15",
        "logsize": "100"
    },
    {
        "id": "5c318ed91e2e00b3",
        "type": "ui_group",
        "name": "Telegram set",
        "tab": "38aee4232c878544",
        "order": 4,
        "disp": true,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "38aee4232c878544",
        "type": "ui_tab",
        "name": "Tasmota Zigbee Admin",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    }
]
